<haxe>
	<typedef path="nme.ui.Acceleration" params="" file="D:\Development\Haxe\nekonme/nme/ui/Acceleration.hx"><a>
	<z><c path="Float"/></z>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<class path="nme.events.Event" params="" file="D:\Development\Haxe\nekonme/nme/events/Event.hx">
		<ACTIVATE public="1" line="8" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" line="9" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" line="10" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" line="11" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" line="12" static="1"><c path="String"/></CHANGE>
		<CLOSE public="1" line="13" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" line="14" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" line="15" static="1"><c path="String"/></CONNECT>
		<DEACTIVATE public="1" line="16" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" line="17" static="1"><c path="String"/></ENTER_FRAME>
		<GOT_INPUT_FOCUS public="1" line="18" static="1"><c path="String"/></GOT_INPUT_FOCUS>
		<ID3 public="1" line="19" static="1"><c path="String"/></ID3>
		<INIT public="1" line="20" static="1"><c path="String"/></INIT>
		<LOST_INPUT_FOCUS public="1" line="21" static="1"><c path="String"/></LOST_INPUT_FOCUS>
		<MOUSE_LEAVE public="1" line="22" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" line="23" static="1"><c path="String"/></OPEN>
		<REMOVED public="1" line="24" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" line="25" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" line="26" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" line="27" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" line="28" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" line="29" static="1"><c path="String"/></SELECT>
		<SOUND_COMPLETE public="1" line="30" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" line="31" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" line="32" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" line="33" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<UNLOAD public="1" line="34" static="1"><c path="String"/></UNLOAD>
		<bubbles public="1" get="nmeGetBubbles" set="null"><e path="Bool"/></bubbles>
		<cancelable public="1" get="nmeGetCancelable" set="null"><e path="Bool"/></cancelable>
		<currentTarget public="1" get="nmeGetCurrentTarget" set="nmeSetCurrentTarget"><d/></currentTarget>
		<eventPhase public="1" get="nmeGetEventPhase" set="null"><c path="Int"/></eventPhase>
		<target public="1" get="nmeGetTarget" set="nmeSetTarget"><d/></target>
		<type public="1" get="nmeGetType" set="null"><c path="String"/></type>
		<_bubbles><e path="Bool"/></_bubbles>
		<_cancelable><e path="Bool"/></_cancelable>
		<_currentTarget><d/></_currentTarget>
		<_eventPhase><c path="Int"/></_eventPhase>
		<_target><d/></_target>
		<_type><c path="String"/></_type>
		<nmeIsCancelled><e path="Bool"/></nmeIsCancelled>
		<nmeIsCancelledNow><e path="Bool"/></nmeIsCancelledNow>
		<clone public="1" set="method" line="66"><f a=""><c path="nme.events.Event"/></f></clone>
		<nmeGetIsCancelled public="1" set="method" line="75">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetIsCancelled>
		<nmeGetIsCancelledNow public="1" set="method" line="84">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetIsCancelledNow>
		<nmeSetPhase public="1" set="method" line="93">
			<f a="inPhase">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetPhase>
		<stopImmediatePropagation public="1" set="method" line="100"><f a=""><e path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method" line="107"><f a=""><e path="Void"/></f></stopPropagation>
		<toString public="1" set="method" line="114"><f a=""><c path="String"/></f></toString>
		<nmeGetBubbles set="method" line="125"><f a=""><e path="Bool"/></f></nmeGetBubbles>
		<nmeGetCancelable set="method" line="126"><f a=""><e path="Bool"/></f></nmeGetCancelable>
		<nmeGetCurrentTarget set="method" line="127"><f a=""><d/></f></nmeGetCurrentTarget>
		<nmeSetCurrentTarget set="method" line="128"><f a="v">
	<d/>
	<d/>
</f></nmeSetCurrentTarget>
		<nmeGetEventPhase set="method" line="129"><f a=""><c path="Int"/></f></nmeGetEventPhase>
		<nmeGetTarget set="method" line="130"><f a=""><d/></f></nmeGetTarget>
		<nmeSetTarget set="method" line="131"><f a="v">
	<d/>
	<d/>
</f></nmeSetTarget>
		<nmeGetType set="method" line="132"><f a=""><c path="String"/></f></nmeGetType>
		<new public="1" set="method" line="53"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.MouseEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/MouseEvent.hx">
		<extends path="nme.events.Event"/>
		<DOUBLE_CLICK public="1" line="12" static="1"><c path="String"/></DOUBLE_CLICK>
		<CLICK public="1" line="13" static="1"><c path="String"/></CLICK>
		<MIDDLE_CLICK public="1" line="14" static="1"><c path="String"/></MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" line="15" static="1"><c path="String"/></MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" line="16" static="1"><c path="String"/></MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" line="17" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" line="18" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" line="19" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" line="20" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" line="21" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" line="22" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_CLICK public="1" line="23" static="1"><c path="String"/></RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" line="24" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" line="25" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" line="26" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" line="27" static="1"><c path="String"/></ROLL_OVER>
		<efLeftDown line="42" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown line="43" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown line="44" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown line="45" static="1"><c path="Int"/></efAltDown>
		<efCommandDown line="46" static="1"><c path="Int"/></efCommandDown>
		<nmeCreate public="1" set="method" line="74" static="1">
			<f a="inType:inEvent:inLocal:inTarget">
				<c path="String"/>
				<d/>
				<c path="nme.geom.Point"/>
				<c path="nme.display.InteractiveObject"/>
				<c path="nme.events.MouseEvent"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeCreate>
		<altKey public="1"><e path="Bool"/></altKey>
		<buttonDown public="1"><e path="Bool"/></buttonDown>
		<clickCount public="1"><c path="Int"/></clickCount>
		<commandKey public="1"><e path="Bool"/></commandKey>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<delta public="1"><c path="Int"/></delta>
		<localX public="1"><c path="Float"/></localX>
		<localY public="1"><c path="Float"/></localY>
		<relatedObject public="1"><c path="nme.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<stageX public="1"><c path="Float"/></stageX>
		<stageY public="1"><c path="Float"/></stageY>
		<clone public="1" set="method" line="65" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<nmeCreateSimilar public="1" set="method" line="88">
			<f a="inType:?related:?targ">
				<c path="String"/>
				<c path="nme.display.InteractiveObject"/>
				<c path="nme.display.InteractiveObject"/>
				<c path="nme.events.MouseEvent"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeCreateSimilar>
		<toString public="1" set="method" line="98" override="1"><f a=""><c path="String"/></f></toString>
		<updateAfterEvent public="1" set="method" line="104"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method" line="49"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta:?commandKey:?clickCount">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.TouchEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/TouchEvent.hx">
		<extends path="nme.events.MouseEvent"/>
		<TOUCH_BEGIN public="1" line="12" static="1"><c path="String"/></TOUCH_BEGIN>
		<TOUCH_END public="1" line="13" static="1"><c path="String"/></TOUCH_END>
		<TOUCH_MOVE public="1" line="14" static="1"><c path="String"/></TOUCH_MOVE>
		<TOUCH_OUT public="1" line="15" static="1"><c path="String"/></TOUCH_OUT>
		<TOUCH_OVER public="1" line="16" static="1"><c path="String"/></TOUCH_OVER>
		<TOUCH_ROLL_OUT public="1" line="17" static="1"><c path="String"/></TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER public="1" line="18" static="1"><c path="String"/></TOUCH_ROLL_OVER>
		<TOUCH_TAP public="1" line="19" static="1"><c path="String"/></TOUCH_TAP>
		<nmeCreate public="1" set="method" line="33" static="1"><f a="inType:inEvent:inLocal:inTarget">
	<c path="String"/>
	<d/>
	<c path="nme.geom.Point"/>
	<c path="nme.display.InteractiveObject"/>
	<c path="nme.events.TouchEvent"/>
</f></nmeCreate>
		<isPrimaryTouchPoint public="1"><e path="Bool"/></isPrimaryTouchPoint>
		<touchPointID public="1"><c path="Int"/></touchPointID>
		<nmeCreateSimilar public="1" set="method" line="44" override="1"><f a="inType:?related:?targ">
	<c path="String"/>
	<c path="nme.display.InteractiveObject"/>
	<c path="nme.display.InteractiveObject"/>
	<c path="nme.events.MouseEvent"/>
</f></nmeCreateSimilar>
		<new public="1" set="method" line="25"><f a="type:?bubbles:?cancelable:?in_localX:?in_localY:?in_relatedObject:?in_ctrlKey:?in_altKey:?in_shiftKey:?in_buttonDown:?in_delta:?in_commandKey:?in_clickCount">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.format.swf.SWFStream" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/SWFStream.hx">
		<mStream public="1"><c path="nme.utils.ByteArray"/></mStream>
		<mVersion public="1"><c path="Int"/></mVersion>
		<mByteBuf public="1"><c path="Int"/></mByteBuf>
		<mBitPos public="1"><c path="Int"/></mBitPos>
		<mTagSize public="1"><c path="Int"/></mTagSize>
		<mTagRead public="1"><c path="Int"/></mTagRead>
		<mPushTagSize><c path="Int"/></mPushTagSize>
		<mPushTagRead><c path="Int"/></mPushTagRead>
		<close public="1" set="method" line="62"><f a=""><e path="Void"/></f></close>
		<GetVersion public="1" set="method" line="67"><f a=""><c path="Int"/></f></GetVersion>
		<AlignBits public="1" set="method" line="68"><f a=""><e path="Void"/></f></AlignBits>
		<Bits public="1" set="method" line="69"><f a="inBits:?inSigned">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
</f></Bits>
		<Twips public="1" set="method" line="104"><f a="inBits">
	<c path="Int"/>
	<c path="Float"/>
</f></Twips>
		<ReadBool public="1" set="method" line="110"><f a=""><e path="Bool"/></f></ReadBool>
		<ReadSpreadMethod public="1" set="method" line="115"><f a=""><e path="nme.display.SpreadMethod"/></f></ReadSpreadMethod>
		<ReadInterpolationMethod public="1" set="method" line="127"><f a=""><e path="nme.display.InterpolationMethod"/></f></ReadInterpolationMethod>
		<ReadCapsStyle public="1" set="method" line="138"><f a=""><e path="nme.display.CapsStyle"/></f></ReadCapsStyle>
		<ReadJoinStyle public="1" set="method" line="149"><f a=""><e path="nme.display.JointStyle"/></f></ReadJoinStyle>
		<ReadScaleMode public="1" set="method" line="161"><f a=""><e path="nme.display.LineScaleMode"/></f></ReadScaleMode>
		<ReadRect public="1" set="method" line="175"><f a=""><c path="nme.geom.Rectangle"/></f></ReadRect>
		<ReadAlign public="1" set="method" line="187"><f a=""><c path="String"/></f></ReadAlign>
		<FrameRate public="1" set="method" line="201"><f a=""><c path="Float"/></f></FrameRate>
		<Frames public="1" set="method" line="204"><f a=""><c path="Int"/></f></Frames>
		<ReadID public="1" set="method" line="207"><f a=""><c path="Int"/></f></ReadID>
		<ReadDepth public="1" set="method" line="213"><f a=""><c path="Int"/></f></ReadDepth>
		<ReadUI16 public="1" set="method" line="219"><f a=""><c path="Int"/></f></ReadUI16>
		<ReadSI16 public="1" set="method" line="225"><f a=""><c path="Int"/></f></ReadSI16>
		<ReadSTwips public="1" set="method" line="231"><f a=""><c path="Float"/></f></ReadSTwips>
		<ReadUTwips public="1" set="method" line="232"><f a=""><c path="Float"/></f></ReadUTwips>
		<ReadInt public="1" set="method" line="234"><f a=""><c path="Int"/></f></ReadInt>
		<ReadFloat public="1" set="method" line="239"><f a=""><c path="Float"/></f></ReadFloat>
		<ReadByte public="1" set="method" line="246"><f a=""><c path="Int"/></f></ReadByte>
		<ReadRGB public="1" set="method" line="252"><f a=""><c path="Int"/></f></ReadRGB>
		<ReadPascalString public="1" set="method" line="261"><f a=""><c path="String"/></f></ReadPascalString>
		<ReadString public="1" set="method" line="276"><f a=""><c path="String"/></f></ReadString>
		<ReadArraySize public="1" set="method" line="292"><f a="inExtended">
	<e path="Bool"/>
	<c path="Int"/>
</f></ReadArraySize>
		<Fixed public="1" set="method" line="304"><f a="inBits">
	<c path="Int"/>
	<c path="Float"/>
</f></Fixed>
		<ReadFixed public="1" set="method" line="308"><f a=""><c path="Float"/></f></ReadFixed>
		<ReadMatrix public="1" set="method" line="315"><f a=""><c path="nme.geom.Matrix"/></f></ReadMatrix>
		<ReadColorTransform public="1" set="method" line="335"><f a="withAlpha">
	<e path="Bool"/>
	<c path="nme.geom.ColorTransform"/>
</f></ReadColorTransform>
		<BeginTag public="1" set="method" line="372"><f a=""><c path="Int"/></f></BeginTag>
		<EndTag public="1" set="method" line="388"><f a=""><e path="Void"/></f></EndTag>
		<ReadBytes public="1" set="method" line="403"><f a="inSize">
	<c path="Int"/>
	<c path="nme.utils.ByteArray"/>
</f></ReadBytes>
		<readFlashBytes public="1" set="method" line="410"><f a="inSize">
	<c path="Int"/>
	<c path="nme.utils.ByteArray"/>
</f></readFlashBytes>
		<BytesLeft public="1" set="method" line="418"><f a=""><c path="Int"/></f></BytesLeft>
		<PushTag public="1" set="method" line="420"><f a=""><e path="Void"/></f></PushTag>
		<PopTag public="1" set="method" line="426"><f a=""><e path="Void"/></f></PopTag>
		<new public="1" set="method" line="26"><f a="inStream">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.StageDisplayState" params="" file="D:\Development\Haxe\nekonme/nme/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
	</enum>
	<class path="nme.events.ProgressEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/ProgressEvent.hx">
		<extends path="nme.events.Event"/>
		<PROGRESS public="1" get="inline" set="null" line="8" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" get="inline" set="null" line="9" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<clone public="1" set="method" line="23" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="29" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="15"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.Loader" params="" file="D:\Development\Haxe\nekonme/nme/Loader.hx">
		<moduleInit line="19" static="1"><e path="Bool"/></moduleInit>
		<moduleName line="20" static="1"><c path="String"/></moduleName>
		<findHaxeLib public="1" set="method" line="34" static="1"><f a="inLib">
	<c path="String"/>
	<c path="String"/>
</f></findHaxeLib>
		<load public="1" set="method" line="67" static="1"><f a="func:args">
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></load>
		<loaderTrace public="1" set="method" line="129" static="1"><f a="inStr">
	<c path="String"/>
	<e path="Void"/>
</f></loaderTrace>
		<sysName set="method" line="144" static="1"><f a=""><a><substr set="null"><f a="">
	<c path="Int"/>
	<a><toLowerCase set="null"><f a=""><c path="String"/></f></toLowerCase></a>
</f></substr></a></f></sysName>
		<tryLoad public="1" set="method" line="156" static="1"><f a="inName:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></tryLoad>
	</class>
	<class path="cpp.Lib" params="" file="C:\Motion-Twin\haxe/std/cpp/Lib.hx">
		<load public="1" set="method" line="32" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Load and return a Cpp primitive from a DLL library.
	</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="44" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Tries to load, and always returns a valid function, but the function may throw
		if called.
	</haxe_doc>
		</loadLazy>
		<rethrow public="1" set="method" line="59" static="1"><f a="inExp">
	<d/>
	<e path="Void"/>
</f></rethrow>
		<stringReference public="1" set="method" line="61" static="1"><f a="inExp">
	<d/>
	<e path="Void"/>
</f></stringReference>
		<print public="1" set="method" line="66" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output.
	</haxe_doc>
		</print>
		<haxeToNeko public="1" set="method" line="74" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic
	</haxe_doc>
		</haxeToNeko>
		<nekoToHaxe public="1" set="method" line="82" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic
	</haxe_doc>
		</nekoToHaxe>
		<println public="1" set="method" line="88" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output followed by a newline character.
	</haxe_doc>
		</println>
	</class>
	<class path="cpp.io.Process" params="" file="C:\Motion-Twin\haxe/std/cpp/io/Process.hx">
		<_run line="120" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></_run>
		<_exit line="121" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></_exit>
		<_pid line="122" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></_pid>
		<_close line="123" static="1"><f a="">
	<d/>
	<unknown/>
</f></_close>
		<p><d/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<getPid public="1" set="method" line="108"><f a=""><c path="Int"/></f></getPid>
		<exitCode public="1" set="method" line="112"><f a=""><c path="Int"/></f></exitCode>
		<close public="1" set="method" line="116"><f a=""><e path="Void"/></f></close>
		<new public="1" set="method" line="101"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.system.System" params="" file="D:\Development\Haxe\nekonme/nme/system/System.hx">
		<deviceID public="1" get="nmeGetDeviceID" set="null" static="1"><c path="String"/></deviceID>
		<totalMemory public="1" get="nmeGetTotalMemory" set="null" static="1"><c path="Int"/></totalMemory>
		<exit public="1" set="method" line="15" static="1"><f a="?inCode">
	<c path="Int"/>
	<e path="Void"/>
</f></exit>
		<gc public="1" set="method" line="21" static="1"><f a=""><e path="Void"/></f></gc>
		<nmeGetDeviceID set="method" line="40" static="1"><f a=""><c path="String"/></f></nmeGetDeviceID>
		<nmeGetTotalMemory set="method" line="43" static="1"><f a=""><c path="Int"/></f></nmeGetTotalMemory>
		<nme_get_unique_device_identifier line="62" static="1"><f a=""><c path="String"/></f></nme_get_unique_device_identifier>
	</class>
	<enum path="nme.net.URLLoaderDataFormat" params="" file="D:\Development\Haxe\nekonme/nme/net/URLLoaderDataFormat.hx">
		<VARIABLES/>
		<TEXT/>
		<BINARY/>
	</enum>
	<class path="Enum" params="T" file="C:\Motion-Twin\haxe/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="List" params="T" file="C:\Motion-Twin\haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="nme.format.swf.EditText" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/EditText.hx">
		<mRect><c path="nme.geom.Rectangle"/></mRect>
		<mWordWrap><e path="Bool"/></mWordWrap>
		<mMultiLine><e path="Bool"/></mMultiLine>
		<mPassword><e path="Bool"/></mPassword>
		<mReadOnly><e path="Bool"/></mReadOnly>
		<mAutoSize><e path="Bool"/></mAutoSize>
		<mNoSelect><e path="Bool"/></mNoSelect>
		<mBorder><e path="Bool"/></mBorder>
		<mWasStatic><e path="Bool"/></mWasStatic>
		<mHTML><e path="Bool"/></mHTML>
		<mUseOutlines><e path="Bool"/></mUseOutlines>
		<mAlpha><c path="Float"/></mAlpha>
		<mMaxLen><c path="Int"/></mMaxLen>
		<mInitialText><c path="String"/></mInitialText>
		<mTextFormat><c path="nme.text.TextFormat"/></mTextFormat>
		<Apply public="1" set="method" line="102"><f a="inText">
	<c path="nme.text.TextField"/>
	<e path="Void"/>
</f></Apply>
		<new public="1" set="method" line="30"><f a="inSWF:inStream:inVersion">
	<c path="nme.format.SWF"/>
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="IntIter" params="" file="C:\Motion-Twin\haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="nme.geom.Point" params="" file="D:\Development\Haxe\nekonme/nme/geom/Point.hx">
		<distance public="1" set="method" line="58" static="1"><f a="pt1:pt2">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
	<c path="Float"/>
</f></distance>
		<interpolate public="1" set="method" line="72" static="1"><f a="pt1:pt2:f">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
	<c path="Float"/>
	<c path="nme.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" line="98" static="1"><f a="len:angle">
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.geom.Point"/>
</f></polar>
		<length public="1" get="nmeGetLength" set="null"><c path="Float"/></length>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<add public="1" set="method" line="46"><f a="v">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></add>
		<clone public="1" set="method" line="52"><f a=""><c path="nme.geom.Point"/></f></clone>
		<equals public="1" set="method" line="66"><f a="toCompare">
	<c path="nme.geom.Point"/>
	<e path="Bool"/>
</f></equals>
		<normalize public="1" set="method" line="78"><f a="thickness">
	<c path="Float"/>
	<e path="Void"/>
</f></normalize>
		<offset public="1" set="method" line="91"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<subtract public="1" set="method" line="104"><f a="v">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></subtract>
		<nmeGetLength set="method" line="115"><f a=""><c path="Float"/></f></nmeGetLength>
		<new public="1" set="method" line="39"><f a="?inX:?inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.text.FontStyle" params="" file="D:\Development\Haxe\nekonme/nme/text/FontStyle.hx">
		<REGULAR/>
		<ITALIC/>
		<BOLD_ITALIC/>
		<BOLD/>
	</enum>
	<class path="haxe.io.Output" params="" file="C:\Motion-Twin\haxe/std/haxe/io/Output.hx">
		<_float_bytes line="253" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_float_bytes>
		<_double_bytes line="254" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_double_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<t path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<class path="cpp.io._Process.Stdin" params="" file="C:\Motion-Twin\haxe/std/cpp/io/Process.hx" private="1" module="cpp.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write line="55" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdin_write>
		<_stdin_close line="56" static="1"><f a="">
	<d/>
	<unknown/>
</f></_stdin_close>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="37" override="1"><f a=""><e path="Void"/></f></close>
		<writeByte public="1" set="method" line="42" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="47" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="32"><f a="p">
	<unknown/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Input" params="" file="C:\Motion-Twin\haxe/std/haxe/io/Input.hx">
		<_float_of_bytes line="266" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_float_of_bytes>
		<_double_of_bytes line="267" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_double_of_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><t path="cpp.Int32"/></f></readInt32>
		<readString public="1" set="method" line="249"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="cpp.io._Process.Stdout" params="" file="C:\Motion-Twin\haxe/std/cpp/io/Process.hx" private="1" module="cpp.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="89" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdout_read>
		<_stderr_read line="90" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stderr_read>
		<p><d/></p>
		<out><e path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="72" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="78" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="66"><f a="p:out">
	<unknown/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="String" params="" file="C:\Motion-Twin\haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="Hash" params="T" file="C:\Motion-Twin\haxe/std/cpp/_std/Hash.hx">
		<__Internal><d/></__Internal>
		<set public="1" set="method" line="33">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="37">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="41">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="45">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="61">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="76">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="29"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="nme.Assets" params="" file="D:\Development\Haxe\nekonme/nme/Assets.hx">
		<cachedBitmapData public="1" line="18" static="1"><c path="Hash"><c path="nme.display.BitmapData"/></c></cachedBitmapData>
		<getBitmapData public="1" set="method" line="28" static="1">
			<f a="id:?useCache">
				<c path="String"/>
				<e path="Bool"/>
				<c path="nme.display.BitmapData"/>
			</f>
			<haxe_doc>
	 * Gets an instance of an embedded bitmap
	 * @usage		var bitmap = new Bitmap (Assets.getBitmapData ("image.jpg"));
	 * @param	id		The ID or asset path for the bitmap
	 * @param	useCache		(Optional) Whether to use BitmapData from the cache (Default: true)
	 * @return		A new BItmapData object
	 </haxe_doc>
		</getBitmapData>
		<getBytes public="1" set="method" line="40" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.utils.ByteArray"/>
			</f>
			<haxe_doc>
	 * Gets an instance of an embedded binary asset
	 * @usage		var bytes = Assets.getBytes ("file.zip");
	 * @param	id		The ID or asset path for the file
	 * @return		A new ByteArray object
	 </haxe_doc>
		</getBytes>
		<getFont public="1" set="method" line="52" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.text.Font"/>
			</f>
			<haxe_doc>
	 * Gets an instance of an embedded font
	 * @usage		var fontName = Assets.getFont ("font.ttf").fontName;
	 * @param	id		The ID or asset path for the font
	 * @return		A new Font object
	 </haxe_doc>
		</getFont>
		<getSound public="1" set="method" line="64" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.media.Sound"/>
			</f>
			<haxe_doc>
	 * Gets an instance of an embedded sound
	 * @usage		var sound = Assets.getSound ("sound.wav");
	 * @param	id		The ID or asset path for the sound
	 * @return		A new Sound object
	 </haxe_doc>
		</getSound>
		<getText public="1" set="method" line="76" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Gets an instance of an embedded text asset
	 * @usage		var text = Assets.getText ("text.txt");
	 * @param	id		The ID or asset path for the file
	 * @return		A new String object
	 </haxe_doc>
		</getText>
		<haxe_doc>
 * Provides a cross-platform interface for accessing embedded assets
 * @author Joshua Granick
 </haxe_doc>
	</class>
	<enum path="nme.display.GradientType" params="" file="D:\Development\Haxe\nekonme/nme/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
	</enum>
	<class path="Array" params="T" file="C:\Motion-Twin\haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="IntHash" params="T" file="C:\Motion-Twin\haxe/std/cpp/_std/IntHash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="cpp.io.Path" params="" file="C:\Motion-Twin\haxe/std/cpp/io/Path.hx">
		<withoutExtension public="1" set="method" line="60" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></withoutExtension>
		<withoutDirectory public="1" set="method" line="66" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></withoutDirectory>
		<directory public="1" set="method" line="72" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></directory>
		<extension public="1" set="method" line="79" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></extension>
		<withExtension public="1" set="method" line="86" static="1"><f a="path:ext">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></withExtension>
		<ext public="1"><c path="String"/></ext>
		<dir public="1"><c path="String"/></dir>
		<file public="1"><c path="String"/></file>
		<backslash public="1"><e path="Bool"/></backslash>
		<toString public="1" set="method" line="56"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="34"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.net.URLRequest" params="" file="D:\Development\Haxe\nekonme/nme/net/URLRequest.hx">
		<AUTH_BASIC public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></AUTH_BASIC>
		<AUTH_DIGEST public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></AUTH_DIGEST>
		<AUTH_GSSNEGOTIATE public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></AUTH_GSSNEGOTIATE>
		<AUTH_NTLM public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></AUTH_NTLM>
		<AUTH_DIGEST_IE public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></AUTH_DIGEST_IE>
		<AUTH_DIGEST_ANY public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></AUTH_DIGEST_ANY>
		<authType public="1"><c path="Int"/></authType>
		<cookieString public="1"><c path="String"/></cookieString>
		<url public="1" set="null"><c path="String"/></url>
		<userPassword public="1"><c path="String"/></userPassword>
		<verbose public="1"><e path="Bool"/></verbose>
		<basicAuth public="1" set="method" line="33"><f a="inUser:inPasswd">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></basicAuth>
		<digestAuth public="1" set="method" line="40"><f a="inUser:inPasswd">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></digestAuth>
		<new public="1" set="method" line="22"><f a="?inURL">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="cpp.zip.Compress" params="" file="C:\Motion-Twin\haxe/std/cpp/zip/Compress.hx">
		<run public="1" set="method" line="47" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init line="58" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></_deflate_init>
		<_deflate_bound line="59" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
</f></_deflate_bound>
		<_deflate_buffer line="60" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></_deflate_buffer>
		<_deflate_end line="61" static="1"><f a="">
	<d/>
	<unknown/>
</f></_deflate_end>
		<_set_flush_mode line="62" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="35"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="39"><f a="f">
	<e path="cpp.zip.Flush"/>
	<e path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="43"><f a=""><e path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="level">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="StringTools" params="" file="C:\Motion-Twin\haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="C:\Motion-Twin\haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="225" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="253" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="292" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="207"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="221"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.AccelerometerEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/AccelerometerEvent.hx">
		<extends path="nme.events.Event"/>
		<UPDATE public="1" static="1"><c path="String"/></UPDATE>
		<accelerationX public="1"><c path="Float"/></accelerationX>
		<accelerationY public="1"><c path="Float"/></accelerationY>
		<accelerationZ public="1"><c path="Float"/></accelerationZ>
		<timestamp public="1"><c path="Float"/></timestamp>
		<clone public="1" set="method" line="30" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="36" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="19"><f a="type:?bubbles:?cancelable:?timestamp:?accelerationX:?accelerationY:?accelerationZ">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.geom.Matrix3D" params="" file="D:\Development\Haxe\nekonme/nme/geom/Matrix3D.hx">
		<getAxisRotation public="1" get="inline" set="null" line="145" static="1"><f a="x:y:z:degrees">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.geom.Matrix3D"/>
</f></getAxisRotation>
		<interpolate public="1" get="inline" set="null" line="197" static="1"><f a="thisMat:toMat:percent">
	<c path="nme.geom.Matrix3D"/>
	<c path="nme.geom.Matrix3D"/>
	<c path="Float"/>
	<c path="nme.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" get="nmeGetDeterminant" set="null"><c path="Float"/></determinant>
		<position public="1" get="nmeGetPosition" set="nmeSetPosition"><c path="nme.geom.Vector3D"/></position>
		<rawData public="1"><t path="nme.Vector"><c path="Float"/></t></rawData>
		<append public="1" get="inline" set="null" line="30"><f a="lhs">
	<c path="nme.geom.Matrix3D"/>
	<e path="Void"/>
</f></append>
		<appendRotation public="1" get="inline" set="null" line="63"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></appendRotation>
		<appendScale public="1" get="inline" set="null" line="75"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendTranslation public="1" get="inline" set="null" line="81"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<clone public="1" get="inline" set="null" line="89"><f a=""><c path="nme.geom.Matrix3D"/></f></clone>
		<decompose public="1" set="method" line="95"><f a=""><t path="nme.Vector"><c path="nme.geom.Vector3D"/></t></f></decompose>
		<deltaTransformVector public="1" get="inline" set="null" line="134"><f a="v">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" get="inline" set="null" line="176"><f a=""><e path="Void"/></f></identity>
		<interpolateTo public="1" get="inline" set="null" line="208"><f a="toMat:percent">
	<c path="nme.geom.Matrix3D"/>
	<c path="Float"/>
	<e path="Void"/>
</f></interpolateTo>
		<invert public="1" get="inline" set="null" line="217"><f a=""><e path="Bool"/></f></invert>
		<prepend public="1" get="inline" set="null" line="304"><f a="rhs">
	<c path="nme.geom.Matrix3D"/>
	<e path="Void"/>
</f></prepend>
		<prependRotation public="1" get="inline" set="null" line="337"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></prependRotation>
		<prependScale public="1" get="inline" set="null" line="349"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependScale>
		<prependTranslation public="1" get="inline" set="null" line="355"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method" line="363"><f a="components">
	<t path="nme.Vector"><c path="nme.geom.Vector3D"/></t>
	<e path="Bool"/>
</f></recompose>
		<transformVector public="1" get="inline" set="null" line="387"><f a="v">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method" line="398"><f a="vin:vout">
	<t path="nme.Vector"><c path="Float"/></t>
	<t path="nme.Vector"><c path="Float"/></t>
	<e path="Void"/>
</f></transformVectors>
		<transpose public="1" get="inline" set="null" line="412"><f a=""><e path="Void"/></f></transpose>
		<nmeGetDeterminant public="1" get="inline" set="null" line="438">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetDeterminant>
		<nmeGetPosition public="1" get="inline" set="null" line="452">
			<f a=""><c path="nme.geom.Vector3D"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetPosition>
		<nmeSetPosition public="1" get="inline" set="null" line="461">
			<f a="val">
				<c path="nme.geom.Vector3D"/>
				<c path="nme.geom.Vector3D"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetPosition>
		<new public="1" set="method" line="17"><f a="?v">
	<t path="nme.Vector"><c path="Float"/></t>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.format.swf.DepthObjects" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Frame.hx" module="nme.format.swf.Frame"><c path="IntHash"><c path="nme.format.swf.DepthSlot"/></c></typedef>
	<class path="nme.format.swf.Frame" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Frame.hx">
		<mObjects><t path="nme.format.swf.DepthObjects"/></mObjects>
		<mFrame><c path="Int"/></mFrame>
		<CopyObjectSet public="1" set="method" line="32"><f a=""><t path="nme.format.swf.DepthObjects"/></f></CopyObjectSet>
		<Remove public="1" set="method" line="40"><f a="inDepth">
	<c path="Int"/>
	<e path="Void"/>
</f></Remove>
		<Place public="1" set="method" line="45"><f a="inCharID:inChar:inDepth:inMatrix:inColTx:inRatio:inName">
	<c path="Int"/>
	<e path="nme.format.swf.Character"/>
	<c path="Int"/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<t path="Null"><c path="Int"/></t>
	<t path="Null"><c path="String"/></t>
	<e path="Void"/>
</f></Place>
		<Move public="1" set="method" line="67"><f a="inDepth:inMatrix:inColTx:inRatio">
	<c path="Int"/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<t path="Null"><c path="Int"/></t>
	<e path="Void"/>
</f></Move>
		<GetFrame public="1" set="method" line="78"><f a=""><c path="Int"/></f></GetFrame>
		<new public="1" set="method" line="18"><f a="?inPrev">
	<c path="nme.format.swf.Frame"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.format.swf.Frames" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Frame.hx" module="nme.format.swf.Frame"><c path="Array"><c path="nme.format.swf.Frame"/></c></typedef>
	<class path="nme.display.IGraphicsData" params="" file="D:\Development\Haxe\nekonme/nme/display/IGraphicsData.hx">
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<new public="1" set="method" line="14"><f a="inHandle">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.GraphicsPath" params="" file="D:\Development\Haxe\nekonme/nme/display/GraphicsPath.hx">
		<extends path="nme.display.IGraphicsData"/>
		<nme_graphics_path_create line="91" static="1"><f a="::">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Bool"/>
	<unknown/>
</f></nme_graphics_path_create>
		<nme_graphics_path_curve_to line="92" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_path_curve_to>
		<nme_graphics_path_line_to line="93" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_path_line_to>
		<nme_graphics_path_move_to line="94" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_path_move_to>
		<nme_graphics_path_wline_to line="95" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_path_wline_to>
		<nme_graphics_path_wmove_to line="96" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_path_wmove_to>
		<nme_graphics_path_get_commands line="97" static="1"><f a=":">
	<d/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_graphics_path_get_commands>
		<nme_graphics_path_set_commands line="98" static="1"><f a=":">
	<d/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_graphics_path_set_commands>
		<nme_graphics_path_get_data line="99" static="1"><f a=":">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<unknown/>
</f></nme_graphics_path_get_data>
		<nme_graphics_path_set_data line="100" static="1"><f a=":">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<unknown/>
</f></nme_graphics_path_set_data>
		<commands public="1" get="nmeGetCommands" set="nmeSetCommands"><c path="Array"><c path="Int"/></c></commands>
		<data public="1" get="nmeGetData" set="nmeSetData"><c path="Array"><c path="Float"/></c></data>
		<curveTo public="1" set="method" line="21"><f a="controlX:controlY:anchorX:anchorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<lineTo public="1" set="method" line="27"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="33"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<wideLineTo public="1" set="method" line="39"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></wideLineTo>
		<wideMoveTo public="1" set="method" line="45"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></wideMoveTo>
		<nmeGetCommands set="method" line="56"><f a=""><c path="Array"><c path="Int"/></c></f></nmeGetCommands>
		<nmeSetCommands set="method" line="64"><f a="inCommands">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
</f></nmeSetCommands>
		<nmeGetData set="method" line="71"><f a=""><c path="Array"><c path="Float"/></c></f></nmeGetData>
		<nmeSetData set="method" line="79"><f a="inData">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
</f></nmeSetData>
		<new public="1" set="method" line="15"><f a="?commands:?data:?winding">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\Motion-Twin\haxe/std/haxe/io/BytesBuffer.hx">
		<b><t path="haxe.io.BytesData"/></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.Memory" params="" file="D:\Development\Haxe\nekonme/nme/Memory.hx">
		<gcRef static="1"><c path="nme.utils.ByteArray"/></gcRef>
		<len static="1"><c path="Int"/></len>
		<select public="1" set="method" line="24" static="1"><f a="inBytes">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></select>
		<getByte public="1" get="inline" set="null" line="116" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getByte>
		<getDouble public="1" get="inline" set="null" line="123" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getDouble>
		<getFloat public="1" get="inline" set="null" line="130" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloat>
		<getI32 public="1" get="inline" set="null" line="137" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getI32>
		<getUI16 public="1" get="inline" set="null" line="144" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getUI16>
		<setByte public="1" get="inline" set="null" line="151" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setByte>
		<setDouble public="1" get="inline" set="null" line="158" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setDouble>
		<setFloat public="1" get="inline" set="null" line="165" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setFloat>
		<setI16 public="1" get="inline" set="null" line="172" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI16>
		<setI32 public="1" get="inline" set="null" line="179" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI32>
	</class>
	<class path="nme.events.IEventDispatcher" params="" file="D:\Development\Haxe\nekonme/nme/events/IEventDispatcher.hx" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
	</class>
	<class path="nme.events.EventDispatcher" params="" file="D:\Development\Haxe\nekonme/nme/events/EventDispatcher.hx">
		<implements path="nme.events.IEventDispatcher"/>
		<nmeEventMap><t path="nme.events.EventMap"/></nmeEventMap>
		<nmeTarget><c path="nme.events.IEventDispatcher"/></nmeTarget>
		<addEventListener public="1" set="method" line="24"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<DispatchCompleteEvent public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	* Creates and dispatches a typical Event.COMPLETE
	* @private
	</haxe_doc>
		</DispatchCompleteEvent>
		<dispatchEvent public="1" set="method" line="51"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<DispatchIOErrorEvent public="1" set="method" line="107">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	* Creates and dispatches a typical IOErrorEvent.IO_ERROR
	* @private
	</haxe_doc>
		</DispatchIOErrorEvent>
		<hasEventListener public="1" set="method" line="114"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method" line="123"><f a="type:listener:?capture">
	<c path="String"/>
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method" line="143"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method" line="149"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<new public="1" set="method" line="17"><f a="?target">
	<c path="nme.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.IBitmapDrawable" params="" file="D:\Development\Haxe\nekonme/nme/display/IBitmapDrawable.hx" interface="1"><nmeDrawToSurface public="1" set="method">
	<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
		<d/>
		<c path="nme.geom.Matrix"/>
		<c path="nme.geom.ColorTransform"/>
		<c path="String"/>
		<c path="nme.geom.Rectangle"/>
		<e path="Bool"/>
		<e path="Void"/>
	</f>
	<haxe_doc>
	 * @private
	 </haxe_doc>
</nmeDrawToSurface></class>
	<class path="nme.display.DisplayObject" params="" file="D:\Development\Haxe\nekonme/nme/display/DisplayObject.hx">
		<extends path="nme.events.EventDispatcher"/>
		<implements path="nme.display.IBitmapDrawable"/>
		<nme_create_display_object line="714" static="1"><f a=""><unknown/></f></nme_create_display_object>
		<nme_display_object_get_graphics line="715" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_display_object_get_graphics>
		<nme_display_object_draw_to_surface line="716" static="1"><f a=":::::">
	<d/>
	<d/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<c path="String"/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_draw_to_surface>
		<nme_display_object_get_id line="717" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_id>
		<nme_display_object_get_x line="718" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_x>
		<nme_display_object_set_x line="719" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_x>
		<nme_display_object_get_y line="720" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_y>
		<nme_display_object_set_y line="721" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_y>
		<nme_display_object_get_scale_x line="722" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_scale_x>
		<nme_display_object_set_scale_x line="723" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_x>
		<nme_display_object_get_scale_y line="724" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_scale_y>
		<nme_display_object_set_scale_y line="725" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_y>
		<nme_display_object_get_mouse_x line="726" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_mouse_x>
		<nme_display_object_get_mouse_y line="727" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_mouse_y>
		<nme_display_object_get_rotation line="728" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_rotation>
		<nme_display_object_set_rotation line="729" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_rotation>
		<nme_display_object_get_bg line="730" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_bg>
		<nme_display_object_set_bg line="731" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_display_object_set_bg>
		<nme_display_object_get_name line="732" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_display_object_get_name>
		<nme_display_object_set_name line="733" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_display_object_set_name>
		<nme_display_object_get_width line="734" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_width>
		<nme_display_object_set_width line="735" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_width>
		<nme_display_object_get_height line="736" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_height>
		<nme_display_object_set_height line="737" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_height>
		<nme_display_object_get_alpha line="738" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_alpha>
		<nme_display_object_set_alpha line="739" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_alpha>
		<nme_display_object_get_blend_mode line="740" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_blend_mode>
		<nme_display_object_set_blend_mode line="741" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_display_object_set_blend_mode>
		<nme_display_object_get_cache_as_bitmap line="742" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_cache_as_bitmap>
		<nme_display_object_set_cache_as_bitmap line="743" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_cache_as_bitmap>
		<nme_display_object_get_visible line="744" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_visible>
		<nme_display_object_set_visible line="745" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_visible>
		<nme_display_object_set_filters line="746" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_display_object_set_filters>
		<nme_display_object_global_to_local line="747" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Point"/>
	<unknown/>
</f></nme_display_object_global_to_local>
		<nme_display_object_local_to_global line="748" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Point"/>
	<unknown/>
</f></nme_display_object_local_to_global>
		<nme_display_object_set_scale9_grid line="749" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scale9_grid>
		<nme_display_object_set_scroll_rect line="750" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scroll_rect>
		<nme_display_object_set_mask line="751" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_display_object_set_mask>
		<nme_display_object_set_matrix line="752" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Matrix"/>
	<unknown/>
</f></nme_display_object_set_matrix>
		<nme_display_object_get_matrix line="753" static="1"><f a="::">
	<d/>
	<c path="nme.geom.Matrix"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_get_matrix>
		<nme_display_object_get_color_transform line="754" static="1"><f a="::">
	<d/>
	<c path="nme.geom.ColorTransform"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_get_color_transform>
		<nme_display_object_set_color_transform line="755" static="1"><f a=":">
	<d/>
	<c path="nme.geom.ColorTransform"/>
	<unknown/>
</f></nme_display_object_set_color_transform>
		<nme_display_object_get_pixel_bounds line="756" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_get_pixel_bounds>
		<nme_display_object_hit_test_point line="757" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nme_display_object_hit_test_point>
		<alpha public="1" get="nmeGetAlpha" set="nmeSetAlpha">
			<c path="Float"/>
			<haxe_doc>
	 * The opacity of the object, as a percentage value from 0 to 1
	 </haxe_doc>
		</alpha>
		<blendMode public="1" get="nmeGetBlendMode" set="nmeSetBlendMode">
			<e path="nme.display.BlendMode"/>
			<haxe_doc>
	 * Adjusts this object blends with other objects on-screen
	 </haxe_doc>
		</blendMode>
		<cacheAsBitmap public="1" get="nmeGetCacheAsBitmap" set="nmeSetCacheAsBitmap">
			<e path="Bool"/>
			<haxe_doc>
	 * If set to true, NME will render the object using its software renderer,
	 * then it will cache the result. This can improve performance for certain
	 * types of complex objects.
	 </haxe_doc>
		</cacheAsBitmap>
		<filters public="1" get="nmeGetFilters" set="nmeSetFilters">
			<c path="Array"><d/></c>
			<haxe_doc>
	 * An array of BitmapFilters being used with this object.
	 * 
	 * If you want to add, remove or change a filter, you need to re-assign
	 * the property, like "displayObject.filters = newFilters;" 
	 </haxe_doc>
		</filters>
		<graphics public="1" get="nmeGetGraphics" set="null">
			<c path="nme.display.Graphics"/>
			<haxe_doc>
	 * Returns a reference to the nme.display.Graphics interface
	 * for this object. You can use this class to draw primitives
	 * like squares, circles, lines, curves or tiles.
	 </haxe_doc>
		</graphics>
		<height public="1" get="nmeGetHeight" set="nmeSetHeight">
			<c path="Float"/>
			<haxe_doc>
	 * The height in pixels for this object
	 </haxe_doc>
		</height>
		<mask public="1" set="nmeSetMask">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc>
	 * Define a mask to control how much of this object should
	 * be visible.
	 </haxe_doc>
		</mask>
		<mouseX public="1" get="nmeGetMouseX" set="null">
			<c path="Float"/>
			<haxe_doc>
	 * Indicates the current mouse x position, using the coordinate system of
	 * this object.
	 </haxe_doc>
		</mouseX>
		<mouseY public="1" get="nmeGetMouseY" set="null">
			<c path="Float"/>
			<haxe_doc>
	 * Indicates the current mouse y position, using the coordinate system of
	 * this object.
	 </haxe_doc>
		</mouseY>
		<name public="1" get="nmeGetName" set="nmeSetName">
			<c path="String"/>
			<haxe_doc>
	 * Get or set the name for this object.
	 </haxe_doc>
		</name>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<opaqueBackground public="1" get="nmeGetBG" set="nmeSetBG">
			<t path="Null"><c path="Int"/></t>
			<haxe_doc>
	 * Set or change an opaque background color for this object.
	 </haxe_doc>
		</opaqueBackground>
		<parent public="1" get="nmeGetParent" set="null">
			<c path="nme.display.DisplayObjectContainer"/>
			<haxe_doc>
	 * If this object has been added to the display list, then this is
	 * the "parent" DisplayObjectContainer. Otherwise this will be
	 * null.
	 </haxe_doc>
		</parent>
		<rotation public="1" get="nmeGetRotation" set="nmeSetRotation">
			<c path="Float"/>
			<haxe_doc>
	 * Control the rotation of this object, in degrees.
	 </haxe_doc>
		</rotation>
		<scale9Grid public="1" get="nmeGetScale9Grid" set="nmeSetScale9Grid">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc>
	 * Set a "scale 9" grid to control how the object stretches or
	 * squashes when its scale is changed.
	 </haxe_doc>
		</scale9Grid>
		<scaleX public="1" get="nmeGetScaleX" set="nmeSetScaleX">
			<c path="Float"/>
			<haxe_doc>
	 * Control the horizontal scale of the object, as a percentage value
	 </haxe_doc>
		</scaleX>
		<scaleY public="1" get="nmeGetScaleY" set="nmeSetScaleY">
			<c path="Float"/>
			<haxe_doc>
	 * Control the vertical scale of the object, as a percentage value
	 </haxe_doc>
		</scaleY>
		<scrollRect public="1" get="nmeGetScrollRect" set="nmeSetScrollRect">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc>
	 * Set a "scroll rect" to control how much of the object should be rendered
	 </haxe_doc>
		</scrollRect>
		<stage public="1" get="nmeGetStage" set="null">
			<c path="nme.display.Stage"/>
			<haxe_doc>
	 * If this object has been added to the display list, which has been added
	 * to the stage, this will return the root Stage object. Otherwise, this will
	 * return null.
	 </haxe_doc>
		</stage>
		<transform public="1" get="nmeGetTransform" set="nmeSetTransform">
			<c path="nme.geom.Transform"/>
			<haxe_doc>
	 * Set the matrix and color transform for this object.
	 * 
	 * If you want to change the object's transform, you need to re-assign
	 * the property, like "displayObject.transform = newTransform;" 
	 </haxe_doc>
		</transform>
		<visible public="1" get="nmeGetVisible" set="nmeSetVisible">
			<e path="Bool"/>
			<haxe_doc>
	 * Controls whether this object is visible and rendered, or if
	 * it is invisible.
	 * 
	 * An object that has visible set to false will perform faster than
	 * and object that only has its alpha set to 0.
	 </haxe_doc>
		</visible>
		<width public="1" get="nmeGetWidth" set="nmeSetWidth">
			<c path="Float"/>
			<haxe_doc>
	 * The width in pixels for this object
	 </haxe_doc>
		</width>
		<x public="1" get="nmeGetX" set="nmeSetX">
			<c path="Float"/>
			<haxe_doc>
	 * The x position for this object, local to its parent
	 </haxe_doc>
		</x>
		<y public="1" get="nmeGetY" set="nmeSetY">
			<c path="Float"/>
			<haxe_doc>
	 * The y position for this object, local to its parent
	 </haxe_doc>
		</y>
		<nmeFilters><c path="Array"><d/></c></nmeFilters>
		<nmeGraphicsCache><c path="nme.display.Graphics"/></nmeGraphicsCache>
		<nmeID><c path="Int"/></nmeID>
		<nmeParent><c path="nme.display.DisplayObjectContainer"/></nmeParent>
		<nmeScale9Grid><c path="nme.geom.Rectangle"/></nmeScale9Grid>
		<nmeScrollRect><c path="nme.geom.Rectangle"/></nmeScrollRect>
		<globalToLocal public="1" set="method" line="187">
			<f a="inGlobal">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>
	 * Converts a point from global coordinates to local coordinates.
	 * @param	inGlobal		A point in global coordinates
	 * @return		A point in local coordinates
	 </haxe_doc>
		</globalToLocal>
		<hitTestPoint public="1" set="method" line="206">
			<f a="x:y:?shapeFlag">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Determines if the specified local coordinate point overlaps the
	 * contents of this object.
	 * 
	 * This method does not check for transparency, so if the object contains
	 * a bitmap image, transparent pixels will return "true" for a hit test.
	 * @param	x		The x coordinate point to test
	 * @param	y		The y coordinate point to test
	 * @param	shapeFlag		Whether to use the exact shape of this object (slower) or a bounding box
	 * @return		Whether the point intersects with the contents of this object
	 </haxe_doc>
		</hitTestPoint>
		<localToGlobal public="1" set="method" line="217">
			<f a="inLocal">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>
	 * Converts a point from local coordinates to global coordinates.
	 * @param	inGlobal		A point in local coordinates
	 * @return		A point in global coordinates
	 </haxe_doc>
		</localToGlobal>
		<nmeAsInteractiveObject set="method" line="225"><f a=""><c path="nme.display.InteractiveObject"/></f></nmeAsInteractiveObject>
		<nmeBroadcast public="1" set="method" line="234">
			<f a="inEvt">
				<c path="nme.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeBroadcast>
		<nmeDrawToSurface public="1" set="method" line="243">
			<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="nme.geom.Matrix"/>
				<c path="nme.geom.ColorTransform"/>
				<c path="String"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeDrawToSurface>
		<nmeFindByID set="method" line="250"><f a="inID">
	<c path="Int"/>
	<c path="nme.display.DisplayObject"/>
</f></nmeFindByID>
		<nmeFireEvent set="method" line="258"><f a="inEvt">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></nmeFireEvent>
		<nmeGetColorTransform public="1" set="method" line="313">
			<f a=""><c path="nme.geom.ColorTransform"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetColorTransform>
		<nmeGetConcatenatedColorTransform public="1" set="method" line="324">
			<f a=""><c path="nme.geom.ColorTransform"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetConcatenatedColorTransform>
		<nmeGetConcatenatedMatrix public="1" set="method" line="335">
			<f a=""><c path="nme.geom.Matrix"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetConcatenatedMatrix>
		<nmeGetInteractiveObjectStack public="1" set="method" line="346">
			<f a="outStack">
				<c path="Array"><c path="nme.display.InteractiveObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetInteractiveObjectStack>
		<nmeGetMatrix public="1" set="method" line="361">
			<f a=""><c path="nme.geom.Matrix"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetMatrix>
		<nmeGetObjectsUnderPoint public="1" set="method" line="372">
			<f a="point:result">
				<c path="nme.geom.Point"/>
				<c path="Array"><c path="nme.display.DisplayObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetObjectsUnderPoint>
		<nmeGetPixelBounds public="1" set="method" line="382">
			<f a=""><c path="nme.geom.Rectangle"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetPixelBounds>
		<nmeOnAdded set="method" line="390"><f a="inObj:inIsOnStage">
	<c path="nme.display.DisplayObject"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></nmeOnAdded>
		<nmeOnRemoved set="method" line="408"><f a="inObj:inWasOnStage">
	<c path="nme.display.DisplayObject"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></nmeOnRemoved>
		<nmeSetColorTransform public="1" set="method" line="429">
			<f a="inTrans">
				<c path="nme.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetColorTransform>
		<nmeSetMatrix public="1" set="method" line="438">
			<f a="inMatrix">
				<c path="nme.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetMatrix>
		<toString public="1" set="method" line="447" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
	 * @inheritDoc
	 </haxe_doc>
		</toString>
		<nmeGetAlpha set="method" line="458"><f a=""><c path="Float"/></f></nmeGetAlpha>
		<nmeSetAlpha set="method" line="459"><f a="inAlpha">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetAlpha>
		<nmeGetBG set="method" line="466"><f a=""><t path="Null"><c path="Int"/></t></f></nmeGetBG>
		<nmeSetBG set="method" line="476"><f a="inBG">
	<t path="Null"><c path="Int"/></t>
	<t path="Null"><c path="Int"/></t>
</f></nmeSetBG>
		<nmeGetBlendMode set="method" line="487"><f a=""><e path="nme.display.BlendMode"/></f></nmeGetBlendMode>
		<nmeSetBlendMode set="method" line="494"><f a="inMode">
	<e path="nme.display.BlendMode"/>
	<e path="nme.display.BlendMode"/>
</f></nmeSetBlendMode>
		<nmeGetCacheAsBitmap set="method" line="501"><f a=""><e path="Bool"/></f></nmeGetCacheAsBitmap>
		<nmeSetCacheAsBitmap set="method" line="502"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetCacheAsBitmap>
		<nmeGetFilters set="method" line="509"><f a=""><c path="Array"><d/></c></f></nmeGetFilters>
		<nmeSetFilters set="method" line="522"><f a="inFilters">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
</f></nmeSetFilters>
		<nmeGetGraphics public="1" set="method" line="545">
			<f a=""><c path="nme.display.Graphics"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetGraphics>
		<nmeGetHeight set="method" line="553"><f a=""><c path="Float"/></f></nmeGetHeight>
		<nmeSetHeight set="method" line="554"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetHeight>
		<nmeSetMask set="method" line="561"><f a="inObject">
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
</f></nmeSetMask>
		<nmeGetMouseX set="method" line="569"><f a=""><c path="Float"/></f></nmeGetMouseX>
		<nmeGetMouseY set="method" line="570"><f a=""><c path="Float"/></f></nmeGetMouseY>
		<nmeGetName set="method" line="573"><f a=""><c path="String"/></f></nmeGetName>
		<nmeSetName set="method" line="574"><f a="inVal">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetName>
		<nmeGetParent set="method" line="581"><f a=""><c path="nme.display.DisplayObjectContainer"/></f></nmeGetParent>
		<nmeSetParent public="1" set="method" line="586">
			<f a="inParent">
				<c path="nme.display.DisplayObjectContainer"/>
				<c path="nme.display.DisplayObjectContainer"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetParent>
		<nmeGetRotation set="method" line="614"><f a=""><c path="Float"/></f></nmeGetRotation>
		<nmeSetRotation set="method" line="615"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetRotation>
		<nmeGetScale9Grid set="method" line="622"><f a=""><c path="nme.geom.Rectangle"/></f></nmeGetScale9Grid>
		<nmeSetScale9Grid set="method" line="623"><f a="inRect">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Rectangle"/>
</f></nmeSetScale9Grid>
		<nmeGetScaleX set="method" line="631"><f a=""><c path="Float"/></f></nmeGetScaleX>
		<nmeSetScaleX set="method" line="632"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetScaleX>
		<nmeGetScaleY set="method" line="639"><f a=""><c path="Float"/></f></nmeGetScaleY>
		<nmeSetScaleY set="method" line="640"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetScaleY>
		<nmeGetScrollRect set="method" line="647"><f a=""><c path="nme.geom.Rectangle"/></f></nmeGetScrollRect>
		<nmeSetScrollRect set="method" line="648"><f a="inRect">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Rectangle"/>
</f></nmeSetScrollRect>
		<nmeGetStage public="1" set="method" line="659">
			<f a=""><c path="nme.display.Stage"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetStage>
		<nmeGetTransform set="method" line="668"><f a=""><c path="nme.geom.Transform"/></f></nmeGetTransform>
		<nmeSetTransform set="method" line="669"><f a="inTransform">
	<c path="nme.geom.Transform"/>
	<c path="nme.geom.Transform"/>
</f></nmeSetTransform>
		<nmeGetVisible set="method" line="677"><f a=""><e path="Bool"/></f></nmeGetVisible>
		<nmeSetVisible set="method" line="678"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetVisible>
		<nmeGetWidth set="method" line="685"><f a=""><c path="Float"/></f></nmeGetWidth>
		<nmeSetWidth set="method" line="686"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetWidth>
		<nmeGetX set="method" line="693"><f a=""><c path="Float"/></f></nmeGetX>
		<nmeSetX set="method" line="694"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetX>
		<nmeGetY set="method" line="701"><f a=""><c path="Float"/></f></nmeGetY>
		<nmeSetY set="method" line="702"><f a="inVal">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetY>
		<new public="1" set="method" line="171"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.Shape" params="" file="D:\Development\Haxe\nekonme/nme/display/Shape.hx">
		<extends path="nme.display.DisplayObject"/>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="flash.display.GradientType" params="" file="D:\Development\Haxe\nekonme/nme/display/GradientType.hx"><e path="nme.display.GradientType"/></typedef>
	<class path="Class" params="T" file="C:\Motion-Twin\haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="nme.display.InteractiveObject" params="" file="D:\Development\Haxe\nekonme/nme/display/InteractiveObject.hx">
		<extends path="nme.display.DisplayObject"/>
		<nme_display_object_set_mouse_enabled line="85" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_mouse_enabled>
		<nme_display_object_set_needs_soft_keyboard line="86" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_needs_soft_keyboard>
		<nme_display_object_get_needs_soft_keyboard line="87" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_needs_soft_keyboard>
		<nme_display_object_set_moves_for_soft_keyboard line="88" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_moves_for_soft_keyboard>
		<nme_display_object_get_moves_for_soft_keyboard line="89" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_moves_for_soft_keyboard>
		<nme_display_object_request_soft_keyboard line="90" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_request_soft_keyboard>
		<doubleClickEnabled public="1"><e path="Bool"/></doubleClickEnabled>
		<mouseEnabled public="1" get="nmeGetMouseEnabled" set="nmeSetMouseEnabled"><e path="Bool"/></mouseEnabled>
		<moveForSoftKeyboard public="1" get="nmeGetMoveForSoftKeyboard" set="nmeSetMoveForSoftKeyboard"><e path="Bool"/></moveForSoftKeyboard>
		<needsSoftKeyboard public="1" get="nmeGetNeedsSoftKeyboard" set="nmeSetNeedsSoftKeyboard"><e path="Bool"/></needsSoftKeyboard>
		<nmeMouseEnabled><e path="Bool"/></nmeMouseEnabled>
		<nmeAsInteractiveObject set="method" line="28" override="1"><f a=""><c path="nme.display.InteractiveObject"/></f></nmeAsInteractiveObject>
		<requestSoftKeyboard public="1" set="method" line="34"><f a=""><e path="Bool"/></f></requestSoftKeyboard>
		<nmeGetMouseEnabled set="method" line="45"><f a=""><e path="Bool"/></f></nmeGetMouseEnabled>
		<nmeSetMouseEnabled set="method" line="46"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetMouseEnabled>
		<nmeSetMoveForSoftKeyboard set="method" line="54"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetMoveForSoftKeyboard>
		<nmeGetMoveForSoftKeyboard set="method" line="61"><f a=""><e path="Bool"/></f></nmeGetMoveForSoftKeyboard>
		<nmeSetNeedsSoftKeyboard set="method" line="67"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetNeedsSoftKeyboard>
		<nmeGetNeedsSoftKeyboard set="method" line="74"><f a=""><e path="Bool"/></f></nmeGetNeedsSoftKeyboard>
		<new public="1" set="method" line="19"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.DisplayObjectContainer" params="" file="D:\Development\Haxe\nekonme/nme/display/DisplayObjectContainer.hx">
		<extends path="nme.display.InteractiveObject"/>
		<nme_create_display_object_container line="342" static="1"><f a=""><unknown/></f></nme_create_display_object_container>
		<nme_doc_add_child line="343" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_doc_add_child>
		<nme_doc_remove_child line="344" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_remove_child>
		<nme_doc_set_child_index line="345" static="1"><f a="::">
	<d/>
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_set_child_index>
		<nme_doc_get_mouse_children line="346" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_doc_get_mouse_children>
		<nme_doc_set_mouse_children line="347" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_doc_set_mouse_children>
		<nme_doc_swap_children line="348" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_swap_children>
		<mouseChildren public="1" get="nmeGetMouseChildren" set="nmeSetMouseChildren"><e path="Bool"/></mouseChildren>
		<numChildren public="1" get="nmeGetNumChildren" set="null"><c path="Int"/></numChildren>
		<tabChildren public="1" get="nmeGetTabChildren" set="nmeSetTabChildren"><e path="Bool"/></tabChildren>
		<nmeChildren><c path="Array"><c path="nme.display.DisplayObject"/></c></nmeChildren>
		<addChild public="1" set="method" line="29"><f a="child">
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="51"><f a="child:index">
	<c path="nme.display.DisplayObject"/>
	<c path="Int"/>
	<c path="nme.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method" line="60"><f a="point">
	<c path="nme.geom.Point"/>
	<e path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method" line="66"><f a="child">
	<c path="nme.display.DisplayObject"/>
	<e path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method" line="82"><f a="index">
	<c path="Int"/>
	<c path="nme.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method" line="94"><f a="name">
	<c path="String"/>
	<c path="nme.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method" line="103"><f a="child">
	<c path="nme.display.DisplayObject"/>
	<c path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method" line="112"><f a="point">
	<c path="nme.geom.Point"/>
	<c path="Array"><c path="nme.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<nmeBroadcast public="1" set="method" line="120" override="1"><f a="inEvt">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></nmeBroadcast>
		<nmeFindByID set="method" line="145" override="1"><f a="inID">
	<c path="Int"/>
	<c path="nme.display.DisplayObject"/>
</f></nmeFindByID>
		<nmeGetObjectsUnderPoint public="1" set="method" line="162" override="1"><f a="point:result">
	<c path="nme.geom.Point"/>
	<c path="Array"><c path="nme.display.DisplayObject"/></c>
	<e path="Void"/>
</f></nmeGetObjectsUnderPoint>
		<nmeOnAdded set="method" line="171" override="1"><f a="inObj:inIsOnStage">
	<c path="nme.display.DisplayObject"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></nmeOnAdded>
		<nmeOnRemoved set="method" line="180" override="1"><f a="inObj:inWasOnStage">
	<c path="nme.display.DisplayObject"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></nmeOnRemoved>
		<nmeRemoveChildFromArray public="1" set="method" line="192">
			<f a="child">
				<c path="nme.display.DisplayObject"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeRemoveChildFromArray>
		<removeChild public="1" set="method" line="204"><f a="child">
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method" line="218"><f a="index">
	<c path="Int"/>
	<c path="nme.display.DisplayObject"/>
</f></removeChildAt>
		<setChildIndex public="1" set="method" line="231"><f a="child:index">
	<c path="nme.display.DisplayObject"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setChildIndex>
		<swapChildren public="1" set="method" line="294"><f a="child1:child2">
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
	<e path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method" line="304"><f a="index1:index2">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></swapChildrenAt>
		<nmeGetMouseChildren set="method" line="324"><f a=""><e path="Bool"/></f></nmeGetMouseChildren>
		<nmeSetMouseChildren set="method" line="325"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetMouseChildren>
		<nmeGetNumChildren set="method" line="332"><f a=""><c path="Int"/></f></nmeGetNumChildren>
		<nmeGetTabChildren set="method" line="333"><f a=""><e path="Bool"/></f></nmeGetTabChildren>
		<nmeSetTabChildren set="method" line="334"><f a="inValue">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetTabChildren>
		<new public="1" set="method" line="22"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.Stage" params="" file="D:\Development\Haxe\nekonme/nme/display/Stage.hx">
		<extends path="nme.display.DisplayObjectContainer"/>
		<nmeEarlyWakeup public="1" line="27" static="1">
			<c path="Float"/>
			<haxe_doc>
	 * Time, in seconds, we wake up before the frame is due.  We then do a
	 * "busy wait" to ensure the frame comes at the right time.  By increasing this number,
	 * the frame rate will be more constant, but the busy wait will take more CPU.
	 </haxe_doc>
		</nmeEarlyWakeup>
		<OrientationPortrait public="1" line="29" static="1"><c path="Int"/></OrientationPortrait>
		<OrientationPortraitUpsideDown public="1" line="30" static="1"><c path="Int"/></OrientationPortraitUpsideDown>
		<OrientationLandscapeRight public="1" line="31" static="1"><c path="Int"/></OrientationLandscapeRight>
		<OrientationLandscapeLeft public="1" line="32" static="1"><c path="Int"/></OrientationLandscapeLeft>
		<OrientationFaceUp public="1" line="33" static="1"><c path="Int"/></OrientationFaceUp>
		<OrientationFaceDown public="1" line="34" static="1"><c path="Int"/></OrientationFaceDown>
		<efLeftDown line="53" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown line="54" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown line="55" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown line="56" static="1"><c path="Int"/></efAltDown>
		<efCommandDown line="57" static="1"><c path="Int"/></efCommandDown>
		<efLocationRight line="58" static="1"><c path="Int"/></efLocationRight>
		<efNoNativeClick line="59" static="1"><c path="Int"/></efNoNativeClick>
		<nmeMouseChanges line="60" static="1"><c path="Array"><c path="String"/></c></nmeMouseChanges>
		<nmeTouchChanges line="61" static="1"><c path="Array"><c path="String"/></c></nmeTouchChanges>
		<sClickEvents line="62" static="1"><c path="Array"><c path="String"/></c></sClickEvents>
		<sDownEvents line="63" static="1"><c path="Array"><c path="String"/></c></sDownEvents>
		<sUpEvents line="64" static="1"><c path="Array"><c path="String"/></c></sUpEvents>
		<getOrientation public="1" set="dynamic" line="104" static="1"><f a=""><c path="Int"/></f></getOrientation>
		<setFixedOrientation public="1" set="method" line="669" static="1"><f a="inOrientation">
	<c path="Int"/>
	<e path="Void"/>
</f></setFixedOrientation>
		<shouldRotateInterface public="1" set="dynamic" line="676" static="1"><f a="inOrientation">
	<c path="Int"/>
	<e path="Bool"/>
</f></shouldRotateInterface>
		<nme_set_stage_handler line="812" static="1"><f a=":::">
	<d/>
	<f a="inEvent">
		<d/>
		<d/>
	</f>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_set_stage_handler>
		<nme_render_stage line="813" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_render_stage>
		<nme_stage_get_focus_id line="814" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_focus_id>
		<nme_stage_set_focus line="815" static="1"><f a="::">
	<d/>
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_focus>
		<nme_stage_get_focus_rect line="816" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_get_focus_rect>
		<nme_stage_set_focus_rect line="817" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_stage_set_focus_rect>
		<nme_stage_is_opengl line="818" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_is_opengl>
		<nme_stage_get_stage_width line="819" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_stage_width>
		<nme_stage_get_stage_height line="820" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_stage_height>
		<nme_stage_get_dpi_scale line="821" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_stage_get_dpi_scale>
		<nme_stage_get_scale_mode line="822" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_scale_mode>
		<nme_stage_set_scale_mode line="823" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_scale_mode>
		<nme_stage_get_align line="824" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_align>
		<nme_stage_set_align line="825" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_align>
		<nme_stage_get_quality line="826" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_quality>
		<nme_stage_set_quality line="827" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_quality>
		<nme_stage_get_display_state line="828" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_display_state>
		<nme_stage_set_display_state line="829" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_display_state>
		<nme_stage_set_next_wake line="830" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_stage_set_next_wake>
		<nme_stage_request_render line="831" static="1"><unknown/></nme_stage_request_render>
		<nme_stage_show_cursor line="832" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_stage_show_cursor>
		<nme_stage_set_fixed_orientation line="833" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_fixed_orientation>
		<nme_stage_get_orientation line="834" static="1"><f a=""><c path="Int"/></f></nme_stage_get_orientation>
		<active public="1" set="null"><e path="Bool"/></active>
		<align public="1" get="nmeGetAlign" set="nmeSetAlign"><e path="nme.display.StageAlign"/></align>
		<displayState public="1" get="nmeGetDisplayState" set="nmeSetDisplayState"><e path="nme.display.StageDisplayState"/></displayState>
		<dpiScale public="1" get="nmeGetDPIScale" set="null"><c path="Float"/></dpiScale>
		<focus public="1" get="nmeGetFocus" set="nmeSetFocus"><c path="nme.display.InteractiveObject"/></focus>
		<frameRate public="1" set="nmeSetFrameRate"><c path="Float"/></frameRate>
		<isOpenGL public="1" get="nmeIsOpenGL" set="null"><e path="Bool"/></isOpenGL>
		<onKey public="1"><f a=":::">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></onKey>
		<onQuit public="1"><f a=""><e path="Void"/></f></onQuit>
		<pauseWhenDeactivated public="1"><e path="Bool"/></pauseWhenDeactivated>
		<quality public="1" get="nmeGetQuality" set="nmeSetQuality"><e path="nme.display.StageQuality"/></quality>
		<renderRequest public="1"><f a=""><e path="Void"/></f></renderRequest>
		<scaleMode public="1" get="nmeGetScaleMode" set="nmeSetScaleMode"><e path="nme.display.StageScaleMode"/></scaleMode>
		<stageFocusRect public="1" get="nmeGetStageFocusRect" set="nmeSetStageFocusRect"><e path="Bool"/></stageFocusRect>
		<stageHeight public="1" get="nmeGetStageHeight" set="null"><c path="Int"/></stageHeight>
		<stageWidth public="1" get="nmeGetStageWidth" set="null"><c path="Int"/></stageWidth>
		<nmeDragBounds><c path="nme.geom.Rectangle"/></nmeDragBounds>
		<nmeDragObject><c path="nme.display.Sprite"/></nmeDragObject>
		<nmeDragOffsetX><c path="Float"/></nmeDragOffsetX>
		<nmeDragOffsetY><c path="Float"/></nmeDragOffsetY>
		<nmeFocusOverObjects><c path="Array"><c path="nme.display.InteractiveObject"/></c></nmeFocusOverObjects>
		<nmeFramePeriod><c path="Float"/></nmeFramePeriod>
		<nmeInvalid><e path="Bool"/></nmeInvalid>
		<nmeLastClickTime><c path="Float"/></nmeLastClickTime>
		<nmeLastDown><c path="Array"><c path="nme.display.InteractiveObject"/></c></nmeLastDown>
		<nmeLastRender><c path="Float"/></nmeLastRender>
		<nmeMouseOverObjects><c path="Array"><c path="nme.display.InteractiveObject"/></c></nmeMouseOverObjects>
		<nmeTouchInfo><c path="IntHash"><c path="nme.display.TouchInfo"/></c></nmeTouchInfo>
		<invalidate public="1" set="method" line="110"><f a=""><e path="Void"/></f></invalidate>
		<nmeCheckFocusInOuts set="method" line="116"><f a="inEvent:inStack">
	<d/>
	<c path="Array"><c path="nme.display.InteractiveObject"/></c>
	<e path="Void"/>
</f></nmeCheckFocusInOuts>
		<nmeCheckInOuts set="method" line="154"><f a="inEvent:inStack:?touchInfo">
	<c path="nme.events.MouseEvent"/>
	<c path="Array"><c path="nme.display.InteractiveObject"/></c>
	<c path="nme.display.TouchInfo"/>
	<e path="Bool"/>
</f></nmeCheckInOuts>
		<nmeCheckRender set="method" line="206"><f a=""><e path="Void"/></f></nmeCheckRender>
		<nmeDoProcessStageEvent set="method" line="224"><f a="inEvent">
	<d/>
	<c path="Float"/>
</f></nmeDoProcessStageEvent>
		<nmeProcessStageEvent set="method" line="329"><f a="inEvent">
	<d/>
	<d/>
</f></nmeProcessStageEvent>
		<nmeDrag set="method" line="336"><f a="inMouse">
	<c path="nme.geom.Point"/>
	<e path="Void"/>
</f></nmeDrag>
		<nmeGetStage public="1" set="method" line="359" override="1"><f a=""><c path="nme.display.Stage"/></f></nmeGetStage>
		<nmeNextFrameDue set="method" line="365"><f a="inOtherTimers">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeNextFrameDue>
		<nmeOnChange set="method" line="379"><f a="inEvent">
	<a><id set="null"><c path="Int"/></id></a>
	<e path="Void"/>
</f></nmeOnChange>
		<nmeOnFocus set="method" line="387"><f a="inEvent">
	<d/>
	<e path="Void"/>
</f></nmeOnFocus>
		<nmeOnKey set="method" line="411"><f a="inEvent:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></nmeOnKey>
		<nmeOnMouse set="method" line="429"><f a="inEvent:inType:inFromMouse">
	<d/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></nmeOnMouse>
		<nmeOnResize set="method" line="512"><f a="inW:inH">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></nmeOnResize>
		<nmeOnTouch set="method" line="519"><f a="inEvent:inType:touchInfo">
	<d/>
	<c path="String"/>
	<c path="nme.display.TouchInfo"/>
	<e path="Void"/>
</f></nmeOnTouch>
		<nmePollTimers public="1" set="method" line="561">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmePollTimers>
		<nmeRender public="1" set="method" line="574">
			<f a="inSendEnterFrame">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeRender>
		<nmeSetActive public="1" set="method" line="596">
			<f a="inActive">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetActive>
		<nmeStartDrag public="1" set="method" line="616">
			<f a="sprite:lockCenter:bounds">
				<c path="nme.display.Sprite"/>
				<e path="Bool"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeStartDrag>
		<nmeStopDrag public="1" set="method" line="645">
			<f a="sprite">
				<c path="nme.display.Sprite"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeStopDrag>
		<nmeUpdateNextWake public="1" set="method" line="655">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeUpdateNextWake>
		<showCursor public="1" set="method" line="682"><f a="inShow">
	<e path="Bool"/>
	<e path="Void"/>
</f></showCursor>
		<nmeGetAlign set="method" line="693"><f a=""><e path="nme.display.StageAlign"/></f></nmeGetAlign>
		<nmeSetAlign set="method" line="700"><f a="inMode">
	<e path="nme.display.StageAlign"/>
	<e path="nme.display.StageAlign"/>
</f></nmeSetAlign>
		<nmeGetDisplayState set="method" line="707"><f a=""><e path="nme.display.StageDisplayState"/></f></nmeGetDisplayState>
		<nmeSetDisplayState set="method" line="714"><f a="inState">
	<e path="nme.display.StageDisplayState"/>
	<e path="nme.display.StageDisplayState"/>
</f></nmeSetDisplayState>
		<nmeGetDPIScale set="method" line="721"><f a=""><c path="Float"/></f></nmeGetDPIScale>
		<nmeGetFocus set="method" line="727"><f a=""><c path="nme.display.InteractiveObject"/></f></nmeGetFocus>
		<nmeSetFocus set="method" line="735"><f a="inObject">
	<c path="nme.display.InteractiveObject"/>
	<c path="nme.display.InteractiveObject"/>
</f></nmeSetFocus>
		<nmeSetFrameRate set="method" line="745"><f a="inRate">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetFrameRate>
		<nmeIsOpenGL set="method" line="753"><f a=""><e path="Bool"/></f></nmeIsOpenGL>
		<nmeGetQuality set="method" line="759"><f a=""><e path="nme.display.StageQuality"/></f></nmeGetQuality>
		<nmeSetQuality set="method" line="766"><f a="inQuality">
	<e path="nme.display.StageQuality"/>
	<e path="nme.display.StageQuality"/>
</f></nmeSetQuality>
		<nmeGetScaleMode set="method" line="773"><f a=""><e path="nme.display.StageScaleMode"/></f></nmeGetScaleMode>
		<nmeSetScaleMode set="method" line="780"><f a="inMode">
	<e path="nme.display.StageScaleMode"/>
	<e path="nme.display.StageScaleMode"/>
</f></nmeSetScaleMode>
		<nmeGetStageFocusRect set="method" line="787"><f a=""><e path="Bool"/></f></nmeGetStageFocusRect>
		<nmeSetStageFocusRect set="method" line="788"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetStageFocusRect>
		<nmeGetStageHeight set="method" line="795"><f a=""><c path="Int"/></f></nmeGetStageHeight>
		<nmeGetStageWidth set="method" line="801"><f a=""><c path="Int"/></f></nmeGetStageWidth>
		<new public="1" set="method" line="80"><f a="inHandle:inWidth:inHeight">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.TouchInfo" params="" file="D:\Development\Haxe\nekonme/nme/display/Stage.hx" module="nme.display.Stage">
		<touchOverObjects public="1"><c path="Array"><c path="nme.display.InteractiveObject"/></c></touchOverObjects>
		<new public="1" set="method" line="845"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="cpp.FileStat" params="" file="C:\Motion-Twin\haxe/std/cpp/FileSystem.hx" module="cpp.FileSystem"><a>
	<uid><c path="Int"/></uid>
	<size><c path="Int"/></size>
	<rdev><c path="Int"/></rdev>
	<nlink><c path="Int"/></nlink>
	<mtime><c path="Date"/></mtime>
	<mode><c path="Int"/></mode>
	<ino><c path="Int"/></ino>
	<gid><c path="Int"/></gid>
	<dev><c path="Int"/></dev>
	<ctime><c path="Date"/></ctime>
	<atime><c path="Date"/></atime>
</a></typedef>
	<enum path="cpp.FileKind" params="" file="C:\Motion-Twin\haxe/std/cpp/FileSystem.hx" module="cpp.FileSystem">
		<kother a="k"><c path="String"/></kother>
		<kfile/>
		<kdir/>
	</enum>
	<class path="cpp.FileSystem" params="" file="C:\Motion-Twin\haxe/std/cpp/FileSystem.hx">
		<exists public="1" set="method" line="49" static="1"><f a="path">
	<c path="String"/>
	<e path="Bool"/>
</f></exists>
		<rename public="1" set="method" line="53" static="1"><f a="path:newpath">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></rename>
		<stat public="1" set="method" line="58" static="1"><f a="path">
	<c path="String"/>
	<t path="cpp.FileStat"/>
</f></stat>
		<fullPath public="1" set="method" line="68" static="1"><f a="relpath">
	<c path="String"/>
	<c path="String"/>
</f></fullPath>
		<kind public="1" set="method" line="72" static="1"><f a="path">
	<c path="String"/>
	<e path="cpp.FileKind"/>
</f></kind>
		<isDirectory public="1" set="method" line="81" static="1"><f a="path">
	<c path="String"/>
	<e path="Bool"/>
</f></isDirectory>
		<createDirectory public="1" set="method" line="85" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></createDirectory>
		<deleteFile public="1" set="method" line="90" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></deleteFile>
		<deleteDirectory public="1" set="method" line="95" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></deleteDirectory>
		<readDirectory public="1" set="method" line="100" static="1"><f a="path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></readDirectory>
		<sys_exists line="104" static="1"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></sys_exists>
		<file_delete line="105" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></file_delete>
		<sys_rename line="106" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></sys_rename>
		<sys_stat line="107" static="1"><f a="">
	<c path="String"/>
	<t path="cpp.FileStat"/>
</f></sys_stat>
		<sys_file_type line="108" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></sys_file_type>
		<sys_create_dir line="109" static="1"><f a=":">
	<c path="String"/>
	<c path="Int"/>
	<unknown/>
</f></sys_create_dir>
		<sys_remove_dir line="110" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></sys_remove_dir>
		<sys_read_dir line="111" static="1"><f a="">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></sys_read_dir>
		<file_full_path line="112" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></file_full_path>
	</class>
	<class path="nme.utils.CompressionAlgorithm" params="" file="D:\Development\Haxe\nekonme/nme/utils/CompressionAlgorithm.hx"><ZLIB public="1" get="inline" set="null" line="6" static="1"><c path="String"/></ZLIB></class>
	<class path="nme.display.Sprite" params="" file="D:\Development\Haxe\nekonme/nme/display/Sprite.hx">
		<extends path="nme.display.DisplayObjectContainer"/>
		<buttonMode public="1"><e path="Bool"/></buttonMode>
		<nmeGetType set="method" line="22"><f a=""><c path="String"/></f></nmeGetType>
		<startDrag public="1" set="method" line="28"><f a="?lockCenter:?bounds">
	<e path="Bool"/>
	<c path="nme.geom.Rectangle"/>
	<e path="Void"/>
</f></startDrag>
		<stopDrag public="1" set="method" line="35"><f a=""><e path="Void"/></f></stopDrag>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.format.swf.MorphObject" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphObject.hx">
		<extends path="nme.display.Sprite"/>
		<mData><c path="nme.format.swf.MorphShape"/></mData>
		<SetRatio public="1" set="method" line="14"><f a="inRatio">
	<c path="Int"/>
	<e path="Bool"/>
</f></SetRatio>
		<new public="1" set="method" line="7"><f a="inData">
	<c path="nme.format.swf.MorphShape"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.feedback.Haptic" params="" file="D:\Development\Haxe\nekonme/nme/feedback/Haptic.hx">
		<vibrate public="1" set="method" line="19" static="1">
			<f a="?period:?duration">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Causes the target device to vibrate. Ignored if the device or platform does not support this feature
	 * @param	period		Controls the vibration frequency. A higher value will result in more "gaps" between vibrations (0-1000) 
	 * @param	duration	The length of the vibration in milliseconds
	 </haxe_doc>
		</vibrate>
		<nme_haptic_vibrate line="33" static="1"><f a=":">
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_haptic_vibrate>
		<haxe_doc>
 * Creates tactile feedback, where supported
 * @author Joshua Granick
 </haxe_doc>
	</class>
	<class path="nme.display.Graphics" params="" file="D:\Development\Haxe\nekonme/nme/display/Graphics.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></TILE_ALPHA>
		<TILE_SMOOTH get="inline" set="null" line="17" static="1"><c path="Int"/></TILE_SMOOTH>
		<RGBA public="1" get="inline" set="null" line="180" static="1"><f a="inRGB:?inA">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></RGBA>
		<nme_gfx_clear line="195" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_clear>
		<nme_gfx_begin_fill line="196" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_begin_fill>
		<nme_gfx_begin_bitmap_fill line="197" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="nme.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_gfx_begin_bitmap_fill>
		<nme_gfx_line_bitmap_fill line="198" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="nme.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_gfx_line_bitmap_fill>
		<nme_gfx_begin_gradient_fill line="199" static="1"><f a="::::::::">
	<d/>
	<c path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="nme.geom.Matrix"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_begin_gradient_fill>
		<nme_gfx_line_gradient_fill line="200" static="1"><f a="::::::::">
	<d/>
	<c path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="nme.geom.Matrix"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_gradient_fill>
		<nme_gfx_end_fill line="201" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_end_fill>
		<nme_gfx_line_style line="202" static="1"><f a="::::::::">
	<d/>
	<t path="Null"><c path="Float"/></t>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_style>
		<nme_gfx_move_to line="203" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_move_to>
		<nme_gfx_line_to line="204" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_to>
		<nme_gfx_curve_to line="205" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_curve_to>
		<nme_gfx_arc_to line="206" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_arc_to>
		<nme_gfx_draw_ellipse line="207" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_ellipse>
		<nme_gfx_draw_data line="208" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_gfx_draw_data>
		<nme_gfx_draw_datum line="209" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_gfx_draw_datum>
		<nme_gfx_draw_rect line="210" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_rect>
		<nme_gfx_draw_tiles line="211" static="1"><f a=":::">
	<d/>
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<unknown/>
</f></nme_gfx_draw_tiles>
		<nme_gfx_draw_points line="212" static="1"><f a=":::::">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_points>
		<nme_gfx_draw_round_rect line="213" static="1"><f a="::::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="Null"><c path="Float"/></t>
	<unknown/>
</f></nme_gfx_draw_round_rect>
		<nme_gfx_draw_triangles line="214" static="1"><f a=":::::::">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
	<unknown/>
</f></nme_gfx_draw_triangles>
		<nmeHandle><d/></nmeHandle>
		<arcTo public="1" set="method" line="28"><f a="inCX:inCY:inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></arcTo>
		<beginBitmapFill public="1" set="method" line="34"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="nme.display.BitmapData"/>
	<c path="nme.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method" line="40"><f a="color:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method" line="46"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="nme.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="nme.geom.Matrix"/>
	<e path="nme.display.SpreadMethod"/>
	<e path="nme.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<clear public="1" set="method" line="58"><f a=""><e path="Void"/></f></clear>
		<curveTo public="1" set="method" line="64"><f a="inCX:inCY:inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method" line="70"><f a="inX:inY:inRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method" line="76"><f a="inX:inY:inWidth:inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method" line="82"><f a="graphicsData">
	<c path="Array"><c path="nme.display.IGraphicsData"/></c>
	<e path="Void"/>
</f></drawGraphicsData>
		<drawGraphicsDatum public="1" set="method" line="93"><f a="graphicsDatum">
	<c path="nme.display.IGraphicsData"/>
	<e path="Void"/>
</f></drawGraphicsDatum>
		<drawPoints public="1" set="method" line="99"><f a="inXY:?inPointRGBA:?inDefaultRGBA:?inSize">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawPoints>
		<drawRect public="1" set="method" line="105"><f a="inX:inY:inWidth:inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method" line="111"><f a="inX:inY:inWidth:inHeight:inRadX:?inRadY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawTiles public="1" set="method" line="120">
			<f a="sheet:inXYID:?inSmooth:?inFlags">
				<c path="nme.display.Tilesheet"/>
				<c path="Array"><c path="Float"/></c>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</drawTiles>
		<drawTriangles public="1" set="method" line="131"><f a="vertices:?indices:?uvtData:?culling:?colours:?blendMode:?viewport">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="nme.display.TriangleCulling"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></drawTriangles>
		<endFill public="1" set="method" line="138"><f a=""><e path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method" line="144"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="nme.display.BitmapData"/>
	<c path="nme.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></lineBitmapStyle>
		<lineGradientStyle public="1" set="method" line="150"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="nme.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="nme.geom.Matrix"/>
	<e path="nme.display.SpreadMethod"/>
	<e path="nme.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<lineStyle public="1" set="method" line="162"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="nme.display.LineScaleMode"/>
	<e path="nme.display.CapsStyle"/>
	<e path="nme.display.JointStyle"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method" line="168"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="174"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="22"><f a="inHandle">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="cpp.io.FileOutput" params="" file="C:\Motion-Twin\haxe/std/cpp/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<file_close line="64" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<file_seek line="65" static="1"><f a="::">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="66" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
</f></file_tell>
		<file_flush line="68" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<unknown/>
</f></file_flush>
		<file_write line="69" static="1"><f a=":::">
	<t path="cpp.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_write>
		<file_write_char line="70" static="1"><f a=":">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
	<unknown/>
</f></file_write_char>
		<__f><t path="cpp.io.FileHandle"/></__f>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="47" override="1"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="51" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="56"><f a="p:pos">
	<c path="Int"/>
	<e path="cpp.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="60"><f a=""><c path="Int"/></f></tell>
		<new public="1" set="method" line="35"><f a="f">
	<t path="cpp.io.FileHandle"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [cpp.io.File.write] to create a [FileOutput]
</haxe_doc>
	</class>
	<enum path="nme.display.StageQuality" params="" file="D:\Development\Haxe\nekonme/nme/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH/>
		<BEST/>
	</enum>
	<class path="nme.display.GraphicsEndFill" params="" file="D:\Development\Haxe\nekonme/nme/display/GraphicsEndFill.hx">
		<extends path="nme.display.IGraphicsData"/>
		<nme_graphics_end_fill_create line="19" static="1"><f a=""><unknown/></f></nme_graphics_end_fill_create>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.format.swf.Tags" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Tags.hx">
		<End public="1" line="9" static="1"><c path="Int"/></End>
		<ShowFrame public="1" line="10" static="1"><c path="Int"/></ShowFrame>
		<DefineShape public="1" line="11" static="1"><c path="Int"/></DefineShape>
		<FreeCharacter public="1" line="12" static="1"><c path="Int"/></FreeCharacter>
		<PlaceObject public="1" line="13" static="1"><c path="Int"/></PlaceObject>
		<RemoveObject public="1" line="14" static="1"><c path="Int"/></RemoveObject>
		<DefineBits public="1" line="15" static="1"><c path="Int"/></DefineBits>
		<DefineButton public="1" line="16" static="1"><c path="Int"/></DefineButton>
		<JPEGTables public="1" line="17" static="1"><c path="Int"/></JPEGTables>
		<SetBackgroundColor public="1" line="18" static="1"><c path="Int"/></SetBackgroundColor>
		<DefineFont public="1" line="20" static="1"><c path="Int"/></DefineFont>
		<DefineText public="1" line="21" static="1"><c path="Int"/></DefineText>
		<DoAction public="1" line="22" static="1"><c path="Int"/></DoAction>
		<DefineFontInfo public="1" line="23" static="1"><c path="Int"/></DefineFontInfo>
		<DefineSound public="1" line="25" static="1"><c path="Int"/></DefineSound>
		<StartSound public="1" line="26" static="1"><c path="Int"/></StartSound>
		<StopSound public="1" line="27" static="1"><c path="Int"/></StopSound>
		<DefineButtonSound public="1" line="29" static="1"><c path="Int"/></DefineButtonSound>
		<SoundStreamHead public="1" line="31" static="1"><c path="Int"/></SoundStreamHead>
		<SoundStreamBlock public="1" line="32" static="1"><c path="Int"/></SoundStreamBlock>
		<DefineBitsLossless public="1" line="34" static="1"><c path="Int"/></DefineBitsLossless>
		<DefineBitsJPEG2 public="1" line="35" static="1"><c path="Int"/></DefineBitsJPEG2>
		<DefineShape2 public="1" line="37" static="1"><c path="Int"/></DefineShape2>
		<DefineButtonCxform public="1" line="38" static="1"><c path="Int"/></DefineButtonCxform>
		<Protect public="1" line="40" static="1"><c path="Int"/></Protect>
		<PathsArePostScript public="1" line="42" static="1"><c path="Int"/></PathsArePostScript>
		<PlaceObject2 public="1" line="44" static="1"><c path="Int"/></PlaceObject2>
		<c27 public="1" line="45" static="1"><c path="Int"/></c27>
		<RemoveObject2 public="1" line="46" static="1"><c path="Int"/></RemoveObject2>
		<SyncFrame public="1" line="48" static="1"><c path="Int"/></SyncFrame>
		<c30 public="1" line="49" static="1"><c path="Int"/></c30>
		<FreeAll public="1" line="50" static="1"><c path="Int"/></FreeAll>
		<DefineShape3 public="1" line="52" static="1"><c path="Int"/></DefineShape3>
		<DefineText2 public="1" line="53" static="1"><c path="Int"/></DefineText2>
		<DefineButton2 public="1" line="54" static="1"><c path="Int"/></DefineButton2>
		<DefineBitsJPEG3 public="1" line="55" static="1"><c path="Int"/></DefineBitsJPEG3>
		<DefineBitsLossless2 public="1" line="56" static="1"><c path="Int"/></DefineBitsLossless2>
		<DefineEditText public="1" line="57" static="1"><c path="Int"/></DefineEditText>
		<DefineVideo public="1" line="59" static="1"><c path="Int"/></DefineVideo>
		<DefineSprite public="1" line="61" static="1"><c path="Int"/></DefineSprite>
		<NameCharacter public="1" line="62" static="1"><c path="Int"/></NameCharacter>
		<ProductInfo public="1" line="63" static="1"><c path="Int"/></ProductInfo>
		<DefineTextFormat public="1" line="64" static="1"><c path="Int"/></DefineTextFormat>
		<FrameLabel public="1" line="65" static="1"><c path="Int"/></FrameLabel>
		<DefineBehavior public="1" line="66" static="1"><c path="Int"/></DefineBehavior>
		<SoundStreamHead2 public="1" line="67" static="1"><c path="Int"/></SoundStreamHead2>
		<DefineMorphShape public="1" line="68" static="1"><c path="Int"/></DefineMorphShape>
		<FrameTag public="1" line="69" static="1"><c path="Int"/></FrameTag>
		<DefineFont2 public="1" line="70" static="1"><c path="Int"/></DefineFont2>
		<GenCommand public="1" line="71" static="1"><c path="Int"/></GenCommand>
		<DefineCommandObj public="1" line="72" static="1"><c path="Int"/></DefineCommandObj>
		<CharacterSet public="1" line="73" static="1"><c path="Int"/></CharacterSet>
		<FontRef public="1" line="74" static="1"><c path="Int"/></FontRef>
		<DefineFunction public="1" line="76" static="1"><c path="Int"/></DefineFunction>
		<PlaceFunction public="1" line="77" static="1"><c path="Int"/></PlaceFunction>
		<GenTagObject public="1" line="79" static="1"><c path="Int"/></GenTagObject>
		<ExportAssets public="1" line="81" static="1"><c path="Int"/></ExportAssets>
		<ImportAssets public="1" line="82" static="1"><c path="Int"/></ImportAssets>
		<EnableDebugger public="1" line="84" static="1"><c path="Int"/></EnableDebugger>
		<DoInitAction public="1" line="86" static="1"><c path="Int"/></DoInitAction>
		<DefineVideoStream public="1" line="87" static="1"><c path="Int"/></DefineVideoStream>
		<VideoFrame public="1" line="88" static="1"><c path="Int"/></VideoFrame>
		<DefineFontInfo2 public="1" line="90" static="1"><c path="Int"/></DefineFontInfo2>
		<DebugID public="1" line="91" static="1"><c path="Int"/></DebugID>
		<EnableDebugger2 public="1" line="92" static="1"><c path="Int"/></EnableDebugger2>
		<ScriptLimits public="1" line="93" static="1"><c path="Int"/></ScriptLimits>
		<SetTabIndex public="1" line="95" static="1"><c path="Int"/></SetTabIndex>
		<DefineShape4_hmm public="1" line="97" static="1"><c path="Int"/></DefineShape4_hmm>
		<c68 public="1" line="98" static="1"><c path="Int"/></c68>
		<FileAttributes public="1" line="100" static="1"><c path="Int"/></FileAttributes>
		<PlaceObject3 public="1" line="102" static="1"><c path="Int"/></PlaceObject3>
		<ImportAssets2 public="1" line="103" static="1"><c path="Int"/></ImportAssets2>
		<DoABC public="1" line="105" static="1"><c path="Int"/></DoABC>
		<DefineFontAlignZones public="1" line="106" static="1"><c path="Int"/></DefineFontAlignZones>
		<CSMTextSettings public="1" line="107" static="1"><c path="Int"/></CSMTextSettings>
		<DefineFont3 public="1" line="108" static="1"><c path="Int"/></DefineFont3>
		<SymbolClass public="1" line="109" static="1"><c path="Int"/></SymbolClass>
		<MetaData public="1" line="110" static="1"><c path="Int"/></MetaData>
		<DefineScalingGrid public="1" line="111" static="1"><c path="Int"/></DefineScalingGrid>
		<c79 public="1" line="112" static="1"><c path="Int"/></c79>
		<c80 public="1" line="113" static="1"><c path="Int"/></c80>
		<c81 public="1" line="114" static="1"><c path="Int"/></c81>
		<DoABC2 public="1" line="115" static="1"><c path="Int"/></DoABC2>
		<DefineShape4 public="1" line="116" static="1"><c path="Int"/></DefineShape4>
		<DefineMorphShape2 public="1" line="117" static="1"><c path="Int"/></DefineMorphShape2>
		<c85 public="1" line="118" static="1"><c path="Int"/></c85>
		<DefineSceneAndFrameLabelData public="1" line="119" static="1"><c path="Int"/></DefineSceneAndFrameLabelData>
		<DefineBinaryData public="1" line="120" static="1"><c path="Int"/></DefineBinaryData>
		<DefineFontName public="1" line="121" static="1"><c path="Int"/></DefineFontName>
		<StartSound2 public="1" line="122" static="1"><c path="Int"/></StartSound2>
		<LAST public="1" line="125" static="1"><c path="Int"/></LAST>
		<tags line="132" static="1"><c path="Array"><c path="String"/></c></tags>
		<string public="1" set="method" line="250" static="1"><f a="i">
	<c path="Int"/>
	<c path="String"/>
</f></string>
	</class>
	<typedef path="flash.display.DisplayObject" params="" file="D:\Development\Haxe\nekonme/nme/display/DisplayObject.hx"><c path="nme.display.DisplayObject"/></typedef>
	<class path="nme.format.swf.Bitmap" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Bitmap.hx">
		<mBitmap><c path="nme.display.BitmapData"/></mBitmap>
		<GetBitmap public="1" set="method" line="91"><f a=""><c path="nme.display.BitmapData"/></f></GetBitmap>
		<AddAlpha set="method" line="107"><f a="inEvt">
	<t path="flash.events.Event"/>
	<e path="Void"/>
</f></AddAlpha>
		<new public="1" set="method" line="26"><f a="inStream:inLossless:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.Int32" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/haxe/Int32.hx"><c path="cpp.CppInt32__"/></typedef>
	<class path="nme.format.SWF" params="" file="D:\Development\Haxe\nekonme/nme/format/SWF.hx">
		<extends path="nme.events.EventDispatcher"/>
		<backgroundColor public="1" set="null"><c path="Int"/></backgroundColor>
		<frameRate public="1" set="null"><c path="Float"/></frameRate>
		<height public="1" set="null"><c path="Int"/></height>
		<width public="1" set="null"><c path="Int"/></width>
		<loaded><e path="Bool"/></loaded>
		<mDictionary><c path="Array"><e path="nme.format.swf.Character"/></c></mDictionary>
		<mMain><c path="nme.format.swf.Sprite"/></mMain>
		<mStream><c path="nme.format.swf.SWFStream"/></mStream>
		<mSymbols><c path="Hash"><c path="Int"/></c></mSymbols>
		<mVersion><c path="Int"/></mVersion>
		<addEventListener public="1" set="method" line="199" override="1"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="nme.format.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<createInstance public="1" set="method" line="209"><f a="?name">
	<c path="String"/>
	<c path="nme.display.MovieClip"/>
</f></createInstance>
		<getBitmapData public="1" set="method" line="258"><f a="name">
	<c path="String"/>
	<c path="nme.display.BitmapData"/>
</f></getBitmapData>
		<getBitmapDataID public="1" set="method" line="291"><f a="id">
	<c path="Int"/>
	<c path="nme.display.BitmapData"/>
</f></getBitmapDataID>
		<getCharacter public="1" set="method" line="309"><f a="inID">
	<c path="Int"/>
	<e path="nme.format.swf.Character"/>
</f></getCharacter>
		<DefineBitmap set="method" line="318"><f a="inLossless:inVersion">
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></DefineBitmap>
		<DefineEditText set="method" line="326"><f a="inVersion">
	<c path="Int"/>
	<e path="Void"/>
</f></DefineEditText>
		<DefineFont set="method" line="333"><f a="inVersion">
	<c path="Int"/>
	<e path="Void"/>
</f></DefineFont>
		<DefineMorphShape set="method" line="340"><f a="inVersion">
	<c path="Int"/>
	<e path="Void"/>
</f></DefineMorphShape>
		<DefineShape set="method" line="347"><f a="inVersion">
	<c path="Int"/>
	<e path="Void"/>
</f></DefineShape>
		<DefineSprite set="method" line="355"><f a=""><e path="Void"/></f></DefineSprite>
		<DefineText set="method" line="401"><f a="inVersion">
	<c path="Int"/>
	<e path="Void"/>
</f></DefineText>
		<ReadFileAttributes set="method" line="408"><f a=""><e path="Void"/></f></ReadFileAttributes>
		<SymbolClass set="method" line="417"><f a=""><e path="Void"/></f></SymbolClass>
		<loader_onComplete set="method" line="436"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></loader_onComplete>
		<new public="1" set="method" line="49"><f a="data">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.format.Function" params="" file="D:\Development\Haxe\nekonme/nme/format/SWF.hx" module="nme.format.SWF"><f a="">
	<d/>
	<e path="Void"/>
</f></typedef>
	<class path="nme.text.TextFormatAlign" params="" file="D:\Development\Haxe\nekonme/nme/text/TextFormatAlign.hx">
		<LEFT public="1" line="7" static="1"><c path="String"/></LEFT>
		<RIGHT public="1" line="8" static="1"><c path="String"/></RIGHT>
		<CENTER public="1" line="9" static="1"><c path="String"/></CENTER>
		<JUSTIFY public="1" line="10" static="1"><c path="String"/></JUSTIFY>
	</class>
	<typedef path="flash.display.Sprite" params="" file="D:\Development\Haxe\nekonme/nme/display/Sprite.hx"><c path="nme.display.Sprite"/></typedef>
	<enum path="nme.ui.MultitouchInputMode" params="" file="D:\Development\Haxe\nekonme/nme/ui/MultitouchInputMode.hx">
		<TOUCH_POINT/>
		<NONE/>
		<GESTURE/>
	</enum>
	<class path="nme.net.SharedObject" params="" file="D:\Development\Haxe\nekonme/nme/net/SharedObject.hx">
		<extends path="nme.events.EventDispatcher"/>
		<getFilePath set="method" line="99" static="1"><f a="name:localPath">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getFilePath>
		<getLocal public="1" set="method" line="145" static="1"><f a="name:?localPath:?secure">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="nme.net.SharedObject"/>
</f></getLocal>
		<data public="1" set="null"><d/></data>
		<localPath><c path="String"/></localPath>
		<name><c path="String"/></name>
		<clear public="1" set="method" line="52"><f a=""><e path="Void"/></f></clear>
		<flush public="1" set="method" line="71"><f a="?minDiskSpace">
	<c path="Int"/>
	<e path="nme.net.SharedObjectFlushStatus"/>
</f></flush>
		<new set="method" line="42"><f a="name:localPath:data">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.geom.Rectangle" params="" file="D:\Development\Haxe\nekonme/nme/geom/Rectangle.hx">
		<bottom public="1" get="nmeGetBottom" set="nmeSetBottom"><c path="Float"/></bottom>
		<bottomRight public="1" get="nmeGetBottomRight" set="nmeSetBottomRight"><c path="nme.geom.Point"/></bottomRight>
		<height public="1"><c path="Float"/></height>
		<left public="1" get="nmeGetLeft" set="nmeSetLeft"><c path="Float"/></left>
		<right public="1" get="nmeGetRight" set="nmeSetRight"><c path="Float"/></right>
		<size public="1" get="nmeGetTopLeft" set="nmeSetTopLeft"><c path="nme.geom.Point"/></size>
		<top public="1" get="nmeGetTop" set="nmeSetTop"><c path="Float"/></top>
		<topLeft public="1" get="nmeGetTopLeft" set="nmeSetTopLeft"><c path="nme.geom.Point"/></topLeft>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<clone public="1" set="method" line="53"><f a=""><c path="nme.geom.Rectangle"/></f></clone>
		<contains public="1" set="method" line="59"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method" line="65"><f a="point">
	<c path="nme.geom.Point"/>
	<e path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method" line="71"><f a="rect">
	<c path="nme.geom.Rectangle"/>
	<e path="Bool"/>
</f></containsRect>
		<equals public="1" set="method" line="77"><f a="toCompare">
	<c path="nme.geom.Rectangle"/>
	<e path="Bool"/>
</f></equals>
		<extendBounds public="1" set="method" line="83"><f a="r">
	<c path="nme.geom.Rectangle"/>
	<e path="Void"/>
</f></extendBounds>
		<inflate public="1" set="method" line="104"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method" line="111"><f a="point">
	<c path="nme.geom.Point"/>
	<e path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method" line="117"><f a="toIntersect">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method" line="133"><f a="toIntersect">
	<c path="nme.geom.Rectangle"/>
	<e path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method" line="146"><f a=""><e path="Bool"/></f></isEmpty>
		<offset public="1" set="method" line="152"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method" line="159"><f a="point">
	<c path="nme.geom.Point"/>
	<e path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method" line="166"><f a=""><e path="Void"/></f></setEmpty>
		<transform public="1" set="method" line="172"><f a="m">
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.Rectangle"/>
</f></transform>
		<union public="1" set="method" line="204"><f a="toUnion">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Rectangle"/>
</f></union>
		<nmeGetBottom set="method" line="219"><f a=""><c path="Float"/></f></nmeGetBottom>
		<nmeSetBottom set="method" line="220"><f a="b">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetBottom>
		<nmeGetBottomRight set="method" line="221"><f a=""><c path="nme.geom.Point"/></f></nmeGetBottomRight>
		<nmeSetBottomRight set="method" line="222"><f a="p">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></nmeSetBottomRight>
		<nmeGetLeft set="method" line="223"><f a=""><c path="Float"/></f></nmeGetLeft>
		<nmeSetLeft set="method" line="224"><f a="l">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetLeft>
		<nmeGetRight set="method" line="225"><f a=""><c path="Float"/></f></nmeGetRight>
		<nmeSetRight set="method" line="226"><f a="r">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetRight>
		<nmeGetSize set="method" line="227"><f a=""><c path="nme.geom.Point"/></f></nmeGetSize>
		<nmeSetSize set="method" line="228"><f a="p">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></nmeSetSize>
		<nmeGetTop set="method" line="229"><f a=""><c path="Float"/></f></nmeGetTop>
		<nmeSetTop set="method" line="230"><f a="t">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeSetTop>
		<nmeGetTopLeft set="method" line="231"><f a=""><c path="nme.geom.Point"/></f></nmeGetTopLeft>
		<nmeSetTopLeft set="method" line="232"><f a="p">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></nmeSetTopLeft>
		<new public="1" set="method" line="44"><f a="?inX:?inY:?inWidth:?inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.errors.Error" params="" file="D:\Development\Haxe\nekonme/nme/errors/Error.hx">
		<errorID><c path="Int"/></errorID>
		<message><d/></message>
		<name><d/></name>
		<getStackTrace set="method" line="19"><f a=""><c path="String"/></f></getStackTrace>
		<toString public="1" set="method" line="25"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="12"><f a="?inMessage:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.errors.TypeError" params="" file="D:\Development\Haxe\nekonme/nme/errors/TypeError.hx">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method" line="8"><f a="?inMessage">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="cpp.io.FileHandle" params="" file="C:\Motion-Twin\haxe/std/cpp/io/File.hx" module="cpp.io.File"><d/></typedef>
	<enum path="cpp.io.FileSeek" params="" file="C:\Motion-Twin\haxe/std/cpp/io/File.hx" module="cpp.io.File">
		<SeekEnd/>
		<SeekCur/>
		<SeekBegin/>
	</enum>
	<class path="cpp.io.File" params="" file="C:\Motion-Twin\haxe/std/cpp/io/File.hx">
		<getContent public="1" set="method" line="40" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></getContent>
		<getBytes public="1" set="method" line="45" static="1"><f a="path">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<read public="1" set="method" line="50" static="1"><f a="path:binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="cpp.io.FileInput"/>
</f></read>
		<write public="1" set="method" line="54" static="1"><f a="path:binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="cpp.io.FileOutput"/>
</f></write>
		<append public="1" set="method" line="58" static="1"><f a="path:binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="cpp.io.FileOutput"/>
</f></append>
		<copy public="1" set="method" line="62" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></copy>
		<stdin public="1" set="method" line="70" static="1"><f a=""><c path="cpp.io.FileInput"/></f></stdin>
		<stdout public="1" set="method" line="74" static="1"><f a=""><c path="cpp.io.FileOutput"/></f></stdout>
		<stderr public="1" set="method" line="78" static="1"><f a=""><c path="cpp.io.FileOutput"/></f></stderr>
		<getChar public="1" set="method" line="82" static="1"><f a="echo">
	<e path="Bool"/>
	<c path="Int"/>
</f></getChar>
		<file_stdin line="86" static="1"><f a=""><t path="cpp.io.FileHandle"/></f></file_stdin>
		<file_stdout line="87" static="1"><f a=""><t path="cpp.io.FileHandle"/></f></file_stdout>
		<file_stderr line="88" static="1"><f a=""><t path="cpp.io.FileHandle"/></f></file_stderr>
		<file_contents line="90" static="1"><f a="">
	<c path="String"/>
	<t path="haxe.io.BytesData"/>
</f></file_contents>
		<file_open line="91" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<t path="cpp.io.FileHandle"/>
</f></file_open>
		<getch line="93" static="1"><f a="">
	<e path="Bool"/>
	<c path="Int"/>
</f></getch>
		<haxe_doc>
	API for reading and writing to files.
</haxe_doc>
	</class>
	<enum path="cpp.zip.Flush" params="" file="C:\Motion-Twin\haxe/std/cpp/zip/Flush.hx">
		<SYNC/>
		<NO/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
	</enum>
	<enum path="nme.display.BlendMode" params="" file="D:\Development\Haxe\nekonme/nme/display/BlendMode.hx">
		<SUBTRACT/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
	</enum>
	<enum path="ValueType" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="39" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="50" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="56" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="60" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="66" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="70" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="77" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="84" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="90" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="94" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="100" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="106" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="110" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="114" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="118" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="134" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="138" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="142" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="147" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="nme.system.Capabilities" params="" file="D:\Development\Haxe\nekonme/nme/system/Capabilities.hx">
		<pixelAspectRatio public="1" get="nmeGetPixelAspectRatio" set="null" static="1"><c path="Float"/></pixelAspectRatio>
		<screenDPI public="1" get="nmeGetScreenDPI" set="null" static="1"><c path="Float"/></screenDPI>
		<screenResolutionX public="1" get="nmeGetScreenResolutionX" set="null" static="1"><c path="Float"/></screenResolutionX>
		<screenResolutionY public="1" get="nmeGetScreenResolutionY" set="null" static="1"><c path="Float"/></screenResolutionY>
		<screenResolutions public="1" get="nmeGetScreenResolutions" set="null" static="1"><c path="Array"><c path="Array"><c path="Int"/></c></c></screenResolutions>
		<nmeGetPixelAspectRatio set="method" line="27" static="1"><f a=""><c path="Float"/></f></nmeGetPixelAspectRatio>
		<nmeGetScreenDPI set="method" line="28" static="1"><f a=""><c path="Float"/></f></nmeGetScreenDPI>
		<nmeGetScreenResolutionX set="method" line="29" static="1"><f a=""><c path="Float"/></f></nmeGetScreenResolutionX>
		<nmeGetScreenResolutionY set="method" line="30" static="1"><f a=""><c path="Float"/></f></nmeGetScreenResolutionY>
		<nmeGetScreenResolutions set="method" line="33" static="1"><f a=""><c path="Array"><c path="Array"><c path="Int"/></c></c></f></nmeGetScreenResolutions>
		<nme_capabilities_get_pixel_aspect_ratio line="56" static="1"><f a=""><c path="Float"/></f></nme_capabilities_get_pixel_aspect_ratio>
		<nme_capabilities_get_screen_dpi line="57" static="1"><f a=""><c path="Float"/></f></nme_capabilities_get_screen_dpi>
		<nme_capabilities_get_screen_resolution_x line="58" static="1"><f a=""><c path="Float"/></f></nme_capabilities_get_screen_resolution_x>
		<nme_capabilities_get_screen_resolution_y line="59" static="1"><f a=""><c path="Float"/></f></nme_capabilities_get_screen_resolution_y>
		<nme_capabilities_get_screen_resolutions line="60" static="1"><f a=""><c path="Array"><c path="Int"/></c></f></nme_capabilities_get_screen_resolutions>
		<haxe_doc>
 * ...
 * @author Joshua Granick
 </haxe_doc>
	</class>
	<typedef path="nme.Vector" params="T" file="D:\Development\Haxe\nekonme/nme/Vector.hx"><c path="Array"><c path="nme.Vector.T"/></c></typedef>
	<class path="nme.display.GraphicsStroke" params="" file="D:\Development\Haxe\nekonme/nme/display/GraphicsStroke.hx">
		<extends path="nme.display.IGraphicsData"/>
		<nme_graphics_stroke_create line="17" static="1"><f a="::::::">
	<t path="Null"><c path="Float"/></t>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<d/>
	<unknown/>
</f></nme_graphics_stroke_create>
		<new public="1" set="method" line="11"><f a="?thickness:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?fill">
	<c path="Float"/>
	<e path="Bool"/>
	<e path="nme.display.LineScaleMode"/>
	<e path="nme.display.CapsStyle"/>
	<e path="nme.display.JointStyle"/>
	<c path="Float"/>
	<c path="nme.display.IGraphicsData"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.events.Function" params="" file="D:\Development\Haxe\nekonme/nme/events/IEventDispatcher.hx" module="nme.events.IEventDispatcher"><f a="">
	<d/>
	<e path="Void"/>
</f></typedef>
	<class path="nme.errors.ArgumentError" params="" file="D:\Development\Haxe\nekonme/nme/errors/ArgumentError.hx">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method" line="5"><f a="?inMessage:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.TextEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/TextEvent.hx">
		<extends path="nme.events.Event"/>
		<LINK public="1" line="8" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" line="9" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1" set="null"><c path="String"/></text>
		<clone public="1" set="method" line="21" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="27" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="14"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.ErrorEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/ErrorEvent.hx">
		<extends path="nme.events.TextEvent"/>
		<errorID public="1" set="null"><c path="Int"/></errorID>
		<clone public="1" set="method" line="18" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="24" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="11"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.IOErrorEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/IOErrorEvent.hx">
		<extends path="nme.events.ErrorEvent"/>
		<IO_ERROR public="1" line="8" static="1"><c path="String"/></IO_ERROR>
		<clone public="1" set="method" line="17" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="23" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="11"><f a="inType:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Reflect" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/Reflect.hx">
		<hasField public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" set="method" line="33" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" set="method" line="42" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="49" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="56" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="60" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="64" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="72" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="79" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="84" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="95" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<enum path="nme.display.JointStyle" params="" file="D:\Development\Haxe\nekonme/nme/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
	</enum>
	<class path="cpp.io.FileInput" params="" file="C:\Motion-Twin\haxe/std/cpp/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<file_eof line="79" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<e path="Bool"/>
</f></file_eof>
		<file_read line="81" static="1"><f a=":::">
	<t path="cpp.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_read>
		<file_read_char line="82" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
</f></file_read_char>
		<file_close line="84" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<file_seek line="85" static="1"><f a="::">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="86" static="1"><f a="">
	<t path="cpp.io.FileHandle"/>
	<c path="Int"/>
</f></file_tell>
		<__f><t path="cpp.io.FileHandle"/></__f>
		<readByte public="1" set="method" line="39" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="50" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="61" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="66"><f a="p:pos">
	<c path="Int"/>
	<e path="cpp.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="70"><f a=""><c path="Int"/></f></tell>
		<eof public="1" set="method" line="75"><f a=""><e path="Bool"/></f></eof>
		<new public="1" set="method" line="35"><f a="f">
	<t path="cpp.io.FileHandle"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [cpp.io.File.read] to create a [FileInput]
</haxe_doc>
	</class>
	<class path="nme.display.Loader" params="" file="D:\Development\Haxe\nekonme/nme/display/Loader.hx">
		<extends path="nme.display.Sprite"/>
		<content public="1" set="null"><c path="nme.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="nme.display.LoaderInfo"/></contentLoaderInfo>
		<nmeImage><c path="nme.display.BitmapData"/></nmeImage>
		<nmeSWF><c path="nme.display.MovieClip"/></nmeSWF>
		<doLoad set="method" line="45"><f a="inBytes">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></doLoad>
		<load public="1" set="method" line="72"><f a="request">
	<c path="nme.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<loadBytes public="1" set="method" line="79"><f a="bytes">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></loadBytes>
		<unload public="1" set="method" line="86"><f a=""><e path="Void"/></f></unload>
		<onData set="method" line="115"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></onData>
		<new public="1" set="method" line="36"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* @author   Hugh Sanderson
* @author   Niel Drummond
* @author   Russell Weir
* @author   Joshua Harlan Lifton
* @todo init, open, progress events
* @todo Complete LoaderInfo initialization
* @todo Cancel previous load request if new load request is made before completion.
</haxe_doc>
	</class>
	<class path="nme.media.ID3Info" params="" file="D:\Development\Haxe\nekonme/nme/media/ID3Info.hx">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method" line="17"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.events.SecurityErrorEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/SecurityErrorEvent.hx">
		<extends path="nme.events.ErrorEvent"/>
		<SECURITY_ERROR public="1" get="inline" set="null" line="8" static="1"><c path="String"/></SECURITY_ERROR>
		<clone public="1" set="method" line="17" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="23" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="11"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.Lib" params="" file="D:\Development\Haxe\nekonme/nme/Lib.hx">
		<FULLSCREEN public="1" line="24" static="1"><c path="Int"/></FULLSCREEN>
		<BORDERLESS public="1" line="25" static="1"><c path="Int"/></BORDERLESS>
		<RESIZABLE public="1" line="26" static="1"><c path="Int"/></RESIZABLE>
		<HARDWARE public="1" line="27" static="1"><c path="Int"/></HARDWARE>
		<VSYNC public="1" line="28" static="1"><c path="Int"/></VSYNC>
		<HW_AA public="1" line="29" static="1"><c path="Int"/></HW_AA>
		<HW_AA_HIRES public="1" line="30" static="1"><c path="Int"/></HW_AA_HIRES>
		<current public="1" get="nmeGetCurrent" set="null" static="1"><c path="nme.display.MovieClip"/></current>
		<initHeight public="1" set="null" static="1"><c path="Int"/></initHeight>
		<initWidth public="1" set="null" static="1"><c path="Int"/></initWidth>
		<stage public="1" get="nmeGetStage" set="null" static="1"><c path="nme.display.Stage"/></stage>
		<nmeCurrent line="37" static="1"><c path="nme.display.MovieClip"/></nmeCurrent>
		<nmeMainFrame line="38" static="1"><d/></nmeMainFrame>
		<nmeStage line="39" static="1"><c path="nme.display.Stage"/></nmeStage>
		<sIsInit line="40" static="1"><e path="Bool"/></sIsInit>
		<company public="1" set="null" static="1"><c path="String"/></company>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<packageName public="1" set="null" static="1"><c path="String"/></packageName>
		<file public="1" set="null" static="1"><c path="String"/></file>
		<close public="1" set="method" line="47" static="1"><f a=""><e path="Void"/></f></close>
		<create public="1" set="method" line="54" static="1"><f a="inOnLoaded:inWidth:inHeight:?inFrameRate:?inColour:?inFlags:?inTitle:?inIcon">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="nme.display.BitmapData"/>
	<e path="Void"/>
</f></create>
		<createManagedStage public="1" set="method" line="82" static="1"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<c path="nme.display.ManagedStage"/>
</f></createManagedStage>
		<exit public="1" set="method" line="92" static="1"><f a=""><e path="Void"/></f></exit>
		<forceClose public="1" set="method" line="108" static="1"><f a=""><e path="Void"/></f></forceClose>
		<getTimer public="1" set="method" line="116" static="1"><f a=""><c path="Int"/></f></getTimer>
		<getURL public="1" set="method" line="123" static="1"><f a="url:?target">
	<c path="nme.net.URLRequest"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<nmeSetCurrentStage public="1" set="method" line="132" static="1">
			<f a="inStage">
				<c path="nme.display.Stage"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetCurrentStage>
		<postUICallback public="1" set="method" line="138" static="1"><f a="inCallback">
	<f a=""><e path="Void"/></f>
	<e path="Void"/>
</f></postUICallback>
		<setIcon public="1" set="method" line="157" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></setIcon>
		<setPackage public="1" set="method" line="164" static="1"><f a="inCompany:inFile:inPack:inVersion">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setPackage>
		<nmeGetCurrent set="method" line="176" static="1"><f a=""><c path="nme.display.MovieClip"/></f></nmeGetCurrent>
		<nmeGetStage set="method" line="188" static="1"><f a=""><c path="nme.display.Stage"/></f></nmeGetStage>
		<nme_set_package line="204" static="1"><f a=":::">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></nme_set_package>
		<nme_get_frame_stage line="205" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_get_frame_stage>
		<nme_get_url line="206" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_get_url>
	</class>
	<class path="nme.utils.Timer" params="" file="D:\Development\Haxe\nekonme/nme/utils/Timer.hx">
		<extends path="nme.events.EventDispatcher"/>
		<currentCount public="1"><c path="Int"/></currentCount>
		<delay public="1"><c path="Float"/></delay>
		<repeatCount public="1"><c path="Int"/></repeatCount>
		<running public="1"><e path="Bool"/></running>
		<timer><c path="haxe.Timer"/></timer>
		<reset public="1" set="method" line="36"><f a=""><e path="Void"/></f></reset>
		<start public="1" set="method" line="46"><f a=""><e path="Void"/></f></start>
		<stop public="1" set="method" line="57"><f a=""><e path="Void"/></f></stop>
		<timer_onTimer set="method" line="74"><f a=""><e path="Void"/></f></timer_onTimer>
		<new public="1" set="method" line="21"><f a="delay:?repeatCount">
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.ui.Accelerometer" params="" file="D:\Development\Haxe\nekonme/nme/ui/Accelerometer.hx">
		<get public="1" set="method" line="11" static="1"><f a=""><t path="nme.ui.Acceleration"/></f></get>
		<nme_input_get_acceleration line="18" static="1"><f a=""><t path="nme.ui.Acceleration"/></f></nme_input_get_acceleration>
	</class>
	<class path="Date" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/Date.hx">
		<now public="1" set="method" line="55" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="59" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<mSeconds><c path="Float"/></mSeconds>
		<getTime public="1" set="method" line="35">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method" line="39">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="41">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="43">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method" line="45">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="47">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="49">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method" line="51">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="53">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="31"><f a="year:month:day:hour:min:sec">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="nme.format.swf.DepthSlot" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/DepthSlot.hx">
		<mID public="1"><c path="Int"/></mID>
		<mAttribs public="1"><t path="nme.format.swf.DisplayAttributesList"/></mAttribs>
		<mCharacter public="1"><e path="nme.format.swf.Character"/></mCharacter>
		<mCurrentAttrib><c path="nme.format.swf.DisplayAttributes"/></mCurrentAttrib>
		<Move public="1" set="method" line="32"><f a="inFrame:inMatrix:inColTx:inRatio">
	<c path="Int"/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<t path="Null"><c path="Int"/></t>
	<e path="Void"/>
</f></Move>
		<FindClosestFrame public="1" set="method" line="46"><f a="inHintFrame:inFrame">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></FindClosestFrame>
		<new public="1" set="method" line="22"><f a="inCharacter:inCharacterID:inAttribs">
	<e path="nme.format.swf.Character"/>
	<c path="Int"/>
	<c path="nme.format.swf.DisplayAttributes"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.utils.IDataInput" params="" file="D:\Development\Haxe\nekonme/nme/utils/IDataInput.hx" interface="1">
		<bytesAvailable public="1" get="nmeGetBytesAvailable" set="null"><c path="Int"/></bytesAvailable>
		<endian public="1" get="nmeGetEndian" set="nmeSetEndian"><c path="String"/></endian>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="outData:?inOffset:?inLen">
	<c path="nme.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUnsignedByte public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="inLen">
	<c path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<nmeGetBytesAvailable public="1" set="method"><f a=""><c path="Int"/></f></nmeGetBytesAvailable>
		<nmeGetEndian public="1" set="method"><f a=""><c path="String"/></f></nmeGetEndian>
		<nmeSetEndian public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetEndian>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\Motion-Twin\haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<class path="nme.geom.Vector3D" params="" file="D:\Development\Haxe\nekonme/nme/geom/Vector3D.hx">
		<X_AXIS public="1" get="nmeGetX_AXIS" set="null" static="1"><c path="nme.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" get="nmeGetY_AXIS" set="null" static="1"><c path="nme.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" get="nmeGetZ_AXIS" set="null" static="1"><c path="nme.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" get="inline" set="null" line="35" static="1"><f a="a:b">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></angleBetween>
		<distance public="1" get="inline" set="null" line="65" static="1"><f a="pt1:pt2">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></distance>
		<nmeGetX_AXIS public="1" get="inline" set="null" line="167" static="1">
			<f a=""><c path="nme.geom.Vector3D"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetX_AXIS>
		<nmeGetY_AXIS public="1" get="inline" set="null" line="172" static="1">
			<f a=""><c path="nme.geom.Vector3D"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetY_AXIS>
		<nmeGetZ_AXIS public="1" get="inline" set="null" line="177" static="1">
			<f a=""><c path="nme.geom.Vector3D"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetZ_AXIS>
		<length public="1" get="nmeGetLength" set="null"><c path="Float"/></length>
		<lengthSquared public="1" get="nmeGetLengthSquared" set="null"><c path="Float"/></lengthSquared>
		<w public="1"><c path="Float"/></w>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<add public="1" get="inline" set="null" line="29"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></add>
		<clone public="1" get="inline" set="null" line="45"><f a=""><c path="nme.geom.Vector3D"/></f></clone>
		<crossProduct public="1" get="inline" set="null" line="51"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" get="inline" set="null" line="57"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></decrementBy>
		<dotProduct public="1" get="inline" set="null" line="75"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></dotProduct>
		<equals public="1" get="inline" set="null" line="81"><f a="toCompare:?allFour">
	<c path="nme.geom.Vector3D"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<incrementBy public="1" get="inline" set="null" line="87"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></incrementBy>
		<nearEquals public="1" get="inline" set="null" line="95"><f a="toCompare:tolerance:?allFour">
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nearEquals>
		<negate public="1" get="inline" set="null" line="101"><f a=""><e path="Void"/></f></negate>
		<normalize public="1" get="inline" set="null" line="109"><f a=""><c path="Float"/></f></normalize>
		<project public="1" get="inline" set="null" line="121"><f a=""><e path="Void"/></f></project>
		<scaleBy public="1" get="inline" set="null" line="129"><f a="s">
	<c path="Float"/>
	<e path="Void"/>
</f></scaleBy>
		<subtract public="1" get="inline" set="null" line="137"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></subtract>
		<toString public="1" get="inline" set="null" line="143"><f a=""><c path="String"/></f></toString>
		<nmeGetLength public="1" get="inline" set="null" line="157">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetLength>
		<nmeGetLengthSquared public="1" get="inline" set="null" line="162">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetLengthSquared>
		<new public="1" set="method" line="20"><f a="?x:?y:?z:?w">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.geom.ColorTransform" params="" file="D:\Development\Haxe\nekonme/nme/geom/ColorTransform.hx">
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<redOffset public="1"><c path="Float"/></redOffset>
		<concat public="1" set="method" line="36"><f a="second">
	<c path="nme.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<new public="1" set="method" line="23"><f a="?inRedMultiplier:?inGreenMultiplier:?inBlueMultiplier:?inAlphaMultiplier:?inRedOffset:?inGreenOffset:?inBlueOffset:?inAlphaOffset">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author	Hugh Sanderson
* @author	Russell Weir
* @todo Check concat() mirrors flash behaviour
</haxe_doc>
	</class>
	<typedef path="nme.format.swf.RenderFunc" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Shape.hx" module="nme.format.swf.Shape"><f a="">
	<c path="nme.display.Graphics"/>
	<e path="Void"/>
</f></typedef>
	<typedef path="nme.format.swf.RenderFuncList" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Shape.hx" module="nme.format.swf.Shape"><c path="Array"><t path="nme.format.swf.RenderFunc"/></c></typedef>
	<class path="nme.format.swf.ShapeEdge" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Shape.hx" module="nme.format.swf.Shape">
		<line public="1" set="method" line="37" static="1"><f a="style:x0:y0:x1:y1">
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.format.swf.ShapeEdge"/>
</f></line>
		<curve public="1" set="method" line="48" static="1"><f a="style:x0:y0:cx:cy:x1:y1">
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="nme.format.swf.ShapeEdge"/>
</f></curve>
		<connects public="1" set="method" line="18"><f a="next">
	<c path="nme.format.swf.ShapeEdge"/>
	<e path="Bool"/>
</f></connects>
		<asCommand public="1" set="method" line="23"><f a=""><f a="gfx">
	<c path="nme.display.Graphics"/>
	<e path="Void"/>
</f></f></asCommand>
		<dump public="1" set="method" line="31"><f a=""><e path="Void"/></f></dump>
		<fillStyle public="1"><c path="Int"/></fillStyle>
		<x0 public="1"><c path="Float"/></x0>
		<y0 public="1"><c path="Float"/></y0>
		<x1 public="1"><c path="Float"/></x1>
		<y1 public="1"><c path="Float"/></y1>
		<isQuadratic public="1"><e path="Bool"/></isQuadratic>
		<cx public="1"><c path="Float"/></cx>
		<cy public="1"><c path="Float"/></cy>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.format.swf.Shape" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Shape.hx">
		<ftSolid line="83" static="1"><c path="Int"/></ftSolid>
		<ftLinear line="84" static="1"><c path="Int"/></ftLinear>
		<ftRadial line="85" static="1"><c path="Int"/></ftRadial>
		<ftRadialF line="86" static="1"><c path="Int"/></ftRadialF>
		<ftBitmapRepeatSmooth line="87" static="1"><c path="Int"/></ftBitmapRepeatSmooth>
		<ftBitmapClippedSmooth line="88" static="1"><c path="Int"/></ftBitmapClippedSmooth>
		<ftBitmapRepeat line="89" static="1"><c path="Int"/></ftBitmapRepeat>
		<ftBitmapClipped line="90" static="1"><c path="Int"/></ftBitmapClipped>
		<mBounds><c path="nme.geom.Rectangle"/></mBounds>
		<mEdgeBounds><c path="nme.geom.Rectangle"/></mEdgeBounds>
		<mHasNonScaled><e path="Bool"/></mHasNonScaled>
		<mHasScaled><e path="Bool"/></mHasScaled>
		<mCommands><t path="nme.format.swf.RenderFuncList"/></mCommands>
		<mFillStyles><t path="nme.format.swf.RenderFuncList"/></mFillStyles>
		<mSWF><c path="nme.format.SWF"/></mSWF>
		<mWaitingLoader><e path="Bool"/></mWaitingLoader>
		<FlushCommands set="method" line="296"><f a="edges:fills">
	<t path="nme.format.swf.RenderFuncList"/>
	<c path="Array"><c path="nme.format.swf.ShapeEdge"/></c>
	<e path="Void"/>
</f></FlushCommands>
		<Render public="1" set="method" line="352"><f a="inGraphics">
	<c path="nme.display.Graphics"/>
	<e path="Bool"/>
</f></Render>
		<ReadFillStyles set="method" line="361"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<t path="nme.format.swf.RenderFuncList"/>
</f></ReadFillStyles>
		<ReadLineStyles set="method" line="464"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<t path="nme.format.swf.RenderFuncList"/>
</f></ReadLineStyles>
		<new public="1" set="method" line="93"><f a="inSWF:inStream:inVersion">
	<c path="nme.format.SWF"/>
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.media.Sound" params="" file="D:\Development\Haxe\nekonme/nme/media/Sound.hx">
		<extends path="nme.events.EventDispatcher"/>
		<nme_sound_from_file line="134" static="1"><f a=":">
	<c path="String"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_sound_from_file>
		<nme_sound_get_id3 line="135" static="1"><f a=":">
	<d/>
	<c path="nme.media.ID3Info"/>
	<unknown/>
</f></nme_sound_get_id3>
		<nme_sound_get_length line="136" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_get_length>
		<nme_sound_close line="137" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_close>
		<nme_sound_get_status line="138" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_get_status>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<id3 public="1" get="nmeGetID3" set="null"><c path="nme.media.ID3Info"/></id3>
		<isBuffering public="1" get="nmeGetIsBuffering" set="null"><e path="Bool"/></isBuffering>
		<length public="1" get="nmeGetLength" set="null"><c path="Float"/></length>
		<url public="1" set="null"><c path="String"/></url>
		<nmeHandle><d/></nmeHandle>
		<nmeLoading><e path="Bool"/></nmeLoading>
		<close public="1" set="method" line="35"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method" line="44"><f a="stream:?context:?forcePlayAsMusic">
	<c path="nme.net.URLRequest"/>
	<c path="nme.media.SoundLoaderContext"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></load>
		<nmeCheckLoading set="method" line="61"><f a=""><e path="Void"/></f></nmeCheckLoading>
		<nmeOnError set="method" line="79"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></nmeOnError>
		<play public="1" set="method" line="87"><f a="?startTime:?loops:?sndTransform">
	<c path="Float"/>
	<c path="Int"/>
	<c path="nme.media.SoundTransform"/>
	<c path="nme.media.SoundChannel"/>
</f></play>
		<nmeGetID3 set="method" line="103"><f a=""><c path="nme.media.ID3Info"/></f></nmeGetID3>
		<nmeGetIsBuffering set="method" line="114"><f a=""><e path="Bool"/></f></nmeGetIsBuffering>
		<nmeGetLength set="method" line="121"><f a=""><c path="Float"/></f></nmeGetLength>
		<new public="1" set="method" line="25"><f a="?stream:?context:?forcePlayAsMusic">
	<c path="nme.net.URLRequest"/>
	<c path="nme.media.SoundLoaderContext"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.ManagedStage" params="" file="D:\Development\Haxe\nekonme/nme/display/ManagedStage.hx">
		<extends path="nme.display.Stage"/>
		<etUnknown public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></etUnknown>
		<etKeyDown public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></etKeyDown>
		<etChar public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></etChar>
		<etKeyUp public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></etKeyUp>
		<etMouseMove public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></etMouseMove>
		<etMouseDown public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></etMouseDown>
		<etMouseClick public="1" get="inline" set="null" line="17" static="1"><c path="Int"/></etMouseClick>
		<etMouseUp public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></etMouseUp>
		<etResize public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></etResize>
		<etPoll public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></etPoll>
		<etQuit public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></etQuit>
		<etFocus public="1" get="inline" set="null" line="22" static="1"><c path="Int"/></etFocus>
		<etShouldRotate public="1" get="inline" set="null" line="23" static="1"><c path="Int"/></etShouldRotate>
		<etDestroyHandler public="1" get="inline" set="null" line="24" static="1"><c path="Int"/></etDestroyHandler>
		<etRedraw public="1" get="inline" set="null" line="25" static="1"><c path="Int"/></etRedraw>
		<etTouchBegin public="1" get="inline" set="null" line="26" static="1"><c path="Int"/></etTouchBegin>
		<etTouchMove public="1" get="inline" set="null" line="27" static="1"><c path="Int"/></etTouchMove>
		<etTouchEnd public="1" get="inline" set="null" line="28" static="1"><c path="Int"/></etTouchEnd>
		<etTouchTap public="1" get="inline" set="null" line="29" static="1"><c path="Int"/></etTouchTap>
		<etChange public="1" get="inline" set="null" line="30" static="1"><c path="Int"/></etChange>
		<efLeftDown public="1" get="inline" set="null" line="31" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown public="1" get="inline" set="null" line="32" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown public="1" get="inline" set="null" line="33" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown public="1" get="inline" set="null" line="34" static="1"><c path="Int"/></efAltDown>
		<efCommandDown public="1" get="inline" set="null" line="35" static="1"><c path="Int"/></efCommandDown>
		<efMiddleDown public="1" get="inline" set="null" line="36" static="1"><c path="Int"/></efMiddleDown>
		<efRightDown public="1" get="inline" set="null" line="37" static="1"><c path="Int"/></efRightDown>
		<efLocationRight public="1" get="inline" set="null" line="38" static="1"><c path="Int"/></efLocationRight>
		<efPrimaryTouch public="1" get="inline" set="null" line="39" static="1"><c path="Int"/></efPrimaryTouch>
		<nme_managed_stage_create line="111" static="1"><f a=":">
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_managed_stage_create>
		<nme_managed_stage_pump_event line="112" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_managed_stage_pump_event>
		<beginRender public="1" set="dynamic" line="48"><f a=""><e path="Void"/></f></beginRender>
		<endRender public="1" set="dynamic" line="54"><f a=""><e path="Void"/></f></endRender>
		<nmeDoProcessStageEvent set="method" line="60" override="1"><f a="inEvent">
	<d/>
	<c path="Float"/>
</f></nmeDoProcessStageEvent>
		<nmeRender public="1" set="method" line="74" override="1">
			<f a="inSendEnterFrame">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeRender>
		<pumpEvent public="1" set="method" line="82"><f a="inEvent">
	<d/>
	<e path="Void"/>
</f></pumpEvent>
		<resize public="1" set="method" line="88"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resize>
		<sendQuit public="1" set="method" line="94"><f a=""><e path="Void"/></f></sendQuit>
		<setNextWake public="1" set="dynamic" line="100"><f a="inDelay">
	<c path="Float"/>
	<e path="Void"/>
</f></setNextWake>
		<new public="1" set="method" line="42"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.format.swf.DisplayAttributes" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/DisplayAttributes.hx">
		<mFrame public="1"><c path="Int"/></mFrame>
		<mCharacterID public="1"><c path="Int"/></mCharacterID>
		<mMatrix public="1"><c path="nme.geom.Matrix"/></mMatrix>
		<mColorTransform public="1"><c path="nme.geom.ColorTransform"/></mColorTransform>
		<mRatio public="1"><t path="Null"><c path="Int"/></t></mRatio>
		<mName public="1"><c path="String"/></mName>
		<clone public="1" set="method" line="18"><f a=""><c path="nme.format.swf.DisplayAttributes"/></f></clone>
		<Apply public="1" set="method" line="30"><f a="inObj">
	<t path="flash.display.DisplayObject"/>
	<e path="Bool"/>
</f></Apply>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="nme.format.swf.DisplayAttributesList" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/DisplayAttributes.hx" module="nme.format.swf.DisplayAttributes"><c path="Array"><c path="nme.format.swf.DisplayAttributes"/></c></typedef>
	<enum path="nme.text.TextFieldType" params="" file="D:\Development\Haxe\nekonme/nme/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
	</enum>
	<enum path="nme.display.StageAlign" params="" file="D:\Development\Haxe\nekonme/nme/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
	</enum>
	<class path="nme.display.Tilesheet" params="" file="D:\Development\Haxe\nekonme/nme/display/Tilesheet.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></TILE_ALPHA>
		<nme_tilesheet_create line="393" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_tilesheet_create>
		<nme_tilesheet_add_rect line="394" static="1"><f a="::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Point"/>
	<unknown/>
</f></nme_tilesheet_add_rect>
		<nmeBitmap public="1">
			<c path="nme.display.BitmapData"/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeBitmap>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<addTileRect public="1" set="method" line="71"><f a="rectangle:?centerPoint">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Point"/>
	<e path="Void"/>
</f></addTileRect>
		<drawTiles public="1" set="method" line="169">
			<f a="graphics:tileData:?smooth:?flags">
				<c path="nme.display.Graphics"/>
				<c path="Array"><c path="Float"/></c>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Fast method to draw a batch of tiles using a Tilesheet
	 * 
	 * The input array accepts the x, y and tile ID for each tile you wish to draw.
	 * For example, an array of [ 0, 0, 0, 10, 10, 1 ] would draw tile 0 to (0, 0) and
	 * tile 1 to (10, 10)
	 * 
	 * You can also set flags for TILE_SCALE, TILE_ROTATION, TILE_RGB and
	 * TILE_ALPHA.
	 * 
	 * Depending on which flags are active, this is the full order of the array:
	 * 
	 * [ x, y, tile ID, scale, rotation, red, green, blue, alpha, x, y ... ]
	 * 
	 * @param	graphics		The nme.display.Graphics object to use for drawing
	 * @param	tileData		An array of all position, ID and optional values for use in drawing
	 * @param	smooth		(Optional) Whether drawn tiles should be smoothed (Default: false)
	 * @param	flags		(Optional) Flags to enable scale, rotation, RGB and/or alpha when drawing (Default: 0)
	 </haxe_doc>
		</drawTiles>
		<new public="1" set="method" line="46"><f a="inImage">
	<c path="nme.display.BitmapData"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.net.SharedObjectFlushStatus" params="" file="D:\Development\Haxe\nekonme/nme/net/SharedObjectFlushStatus.hx">
		<PENDING/>
		<FLUSHED/>
	</enum>
	<class path="nme.errors.SecurityError" params="" file="D:\Development\Haxe\nekonme/nme/errors/SecurityError.hx">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method" line="8"><f a="?inMessage">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="StringBuf" params="" file="C:\Motion-Twin\haxe/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="59">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="75">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="89">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="cpp.vm.Gc" params="" file="C:\Motion-Twin\haxe/std/cpp/vm/Gc.hx">
		<enable public="1" set="method" line="5" static="1"><f a="inEnable">
	<e path="Bool"/>
	<e path="Void"/>
</f></enable>
		<run public="1" set="method" line="10" static="1"><f a="major">
	<e path="Bool"/>
	<e path="Void"/>
</f></run>
		<trace public="1" set="method" line="15" static="1"><f a="sought:?printInstances">
	<c path="Class"><d/></c>
	<e path="Bool"/>
	<c path="Int"/>
</f></trace>
	</class>
	<class path="haxe.Log" params="" file="C:\Motion-Twin\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="nme.format.swf.TextRecord" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/StaticText.hx" module="nme.format.swf.StaticText"><a>
	<mSWFFont><c path="nme.format.swf.Font"/></mSWFFont>
	<mOffsetY><c path="Int"/></mOffsetY>
	<mOffsetX><c path="Int"/></mOffsetX>
	<mHeight><c path="Float"/></mHeight>
	<mGlyphs><c path="Array"><c path="Int"/></c></mGlyphs>
	<mColour><c path="Int"/></mColour>
	<mAlpha><c path="Float"/></mAlpha>
	<mAdvances><c path="Array"><c path="Int"/></c></mAdvances>
</a></typedef>
	<typedef path="nme.format.swf.TextRecords" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/StaticText.hx" module="nme.format.swf.StaticText"><c path="Array"><t path="nme.format.swf.TextRecord"/></c></typedef>
	<class path="nme.format.swf.StaticText" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/StaticText.hx">
		<mBounds><c path="nme.geom.Rectangle"/></mBounds>
		<mTextMatrix><c path="nme.geom.Matrix"/></mTextMatrix>
		<mRecords><t path="nme.format.swf.TextRecords"/></mRecords>
		<Render public="1" set="method" line="112"><f a="inGfx">
	<c path="nme.display.Graphics"/>
	<e path="Void"/>
</f></Render>
		<new public="1" set="method" line="34"><f a="inSWF:inStream:inVersion">
	<c path="nme.format.SWF"/>
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Serializer" params="" file="C:\Motion-Twin\haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="34" static="1">
			<e path="Bool"/>
			<haxe_doc>
		If the values you are serializing can contain
		circular references or objects repetitions, you should
		set USE_CACHE to true to prevent infinite loops.
	</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="40" static="1">
			<e path="Bool"/>
			<haxe_doc>
		Use constructor indexes for enums instead of names.
		This is less reliable but more compact.
	</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="42" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="416" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Serialize a single value and return the string.
	</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="Hash"><c path="Int"/></c></shash>
		<scount><c path="Int"/></scount>
		<useCache public="1"><e path="Bool"/></useCache>
		<useEnumIndex public="1"><e path="Bool"/></useEnumIndex>
		<toString public="1" set="method" line="60"><f a=""><c path="String"/></f></toString>
		<serializeString set="method" line="94"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="113"><f a="v">
	<unknown/>
	<e path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="150"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="158"><f a="v">
	<d/>
	<e path="Void"/>
</f></serialize>
		<serializeException public="1" set="method" line="397"><f a="e">
	<d/>
	<e path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="51"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.events.TimerEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/TimerEvent.hx">
		<extends path="nme.events.Event"/>
		<TIMER public="1" line="8" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE public="1" line="9" static="1"><c path="String"/></TIMER_COMPLETE>
		<clone public="1" set="method" line="18" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="24" override="1"><f a=""><c path="String"/></f></toString>
		<updateAfterEvent public="1" set="method" line="30"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method" line="12"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.SpreadMethod" params="" file="D:\Development\Haxe\nekonme/nme/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
	</enum>
	<class path="nme.net.URLLoader" params="" file="D:\Development\Haxe\nekonme/nme/net/URLLoader.hx">
		<extends path="nme.events.EventDispatcher"/>
		<activeLoaders line="43" static="1"><c path="List"><c path="nme.net.URLLoader"/></c></activeLoaders>
		<urlInvalid get="inline" set="null" line="44" static="1"><c path="Int"/></urlInvalid>
		<urlInit get="inline" set="null" line="45" static="1"><c path="Int"/></urlInit>
		<urlLoading get="inline" set="null" line="46" static="1"><c path="Int"/></urlLoading>
		<urlComplete get="inline" set="null" line="47" static="1"><c path="Int"/></urlComplete>
		<urlError get="inline" set="null" line="48" static="1"><c path="Int"/></urlError>
		<hasActive public="1" set="method" line="78" static="1"><f a=""><e path="Bool"/></f></hasActive>
		<initialize public="1" set="method" line="84" static="1"><f a="inCACertFilePath">
	<c path="String"/>
	<e path="Void"/>
</f></initialize>
		<nmeLoadPending public="1" set="method" line="129" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeLoadPending>
		<nmePollData public="1" set="method" line="138" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmePollData>
		<nme_curl_create line="217" static="1"><f a="::::">
	<c path="String"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_curl_create>
		<nme_curl_process_loaders line="218" static="1"><f a=""><unknown/></f></nme_curl_process_loaders>
		<nme_curl_update_loader line="219" static="1"><f a=":">
	<d/>
	<c path="nme.net.URLLoader"/>
	<unknown/>
</f></nme_curl_update_loader>
		<nme_curl_get_code line="220" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_curl_get_code>
		<nme_curl_get_error_message line="221" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_curl_get_error_message>
		<nme_curl_get_data line="222" static="1"><f a="">
	<d/>
	<c path="nme.utils.ByteArray"/>
</f></nme_curl_get_data>
		<nme_curl_get_cookies line="223" static="1"><f a="">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></nme_curl_get_cookies>
		<nme_curl_initialize line="224" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_curl_initialize>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="nme.net.URLLoaderDataFormat"/></dataFormat>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<state><c path="Int"/></state>
		<close public="1" set="method" line="66"><f a=""><e path="Void"/></f></close>
		<getCookies public="1" set="method" line="72"><f a=""><c path="Array"><c path="String"/></c></f></getCookies>
		<load public="1" set="method" line="90"><f a="request">
	<c path="nme.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<onError set="method" line="155"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></onError>
		<update set="method" line="161"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="53"><f a="?request">
	<c path="nme.net.URLRequest"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author   Hugh Sanderson
* @author   Niel Drummond
* @author   Russell Weir
* @author   Joshua Harlan Lifton
* @todo open and progress events
* @todo Complete Variables type
* @todo HTTP POST method
</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Motion-Twin\haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<typedef path="nme.display.BitmapInt32" params="" file="D:\Development\Haxe\nekonme/nme/display/BitmapInt32.hx"><c path="Int"/></typedef>
	<class path="haxe.io.Unsigned_char__" params="" file="C:\Motion-Twin\haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="C:\Motion-Twin\haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="haxe.io.Unsigned_char__"/></c></typedef>
	<class path="nme.display.LoaderInfo" params="" file="D:\Development\Haxe\nekonme/nme/display/LoaderInfo.hx">
		<extends path="nme.net.URLLoader"/>
		<create public="1" set="method" line="55" static="1"><f a="ldr">
	<c path="nme.display.Loader"/>
	<c path="nme.display.LoaderInfo"/>
</f></create>
		<bytes public="1" get="getBytes" set="null"><c path="nme.utils.ByteArray"/></bytes>
		<childAllowsParent public="1" set="null"><e path="Bool"/></childAllowsParent>
		<content public="1"><c path="nme.display.DisplayObject"/></content>
		<contentType public="1"><c path="String"/></contentType>
		<frameRate public="1" set="null"><c path="Float"/></frameRate>
		<height public="1" set="null"><c path="Int"/></height>
		<loader public="1" set="null"><c path="nme.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><e path="Bool"/></parentAllowsChild>
		<sameDomain public="1" set="null"><e path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="nme.events.EventDispatcher"/></sharedEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><c path="Int"/></width>
		<pendingURL><c path="String"/></pendingURL>
		<load public="1" set="method" line="64" override="1"><f a="request">
	<c path="nme.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<onURLLoaded set="method" line="92"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></onURLLoaded>
		<getBytes set="method" line="103"><f a=""><c path="nme.utils.ByteArray"/></f></getBytes>
		<new set="method" line="41"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* @author	Niel Drummond
* @author	Russell Weir
* @author       Joshua Harlan Lifton
* @todo init, open, progress, unload (?) events
</haxe_doc>
	</class>
	<class path="nme.display.GraphicsPathWinding" params="" file="D:\Development\Haxe\nekonme/nme/display/GraphicsPathWinding.hx">
		<EVEN_ODD public="1" get="inline" set="null" line="8" static="1"><c path="String"/></EVEN_ODD>
		<NON_ZERO public="1" get="inline" set="null" line="9" static="1"><c path="String"/></NON_ZERO>
	</class>
	<class path="nme.filters.BitmapFilterType" params="" file="D:\Development\Haxe\nekonme/nme/filters/BitmapFilterType.hx">
		<FULL public="1" line="7" static="1"><c path="String"/></FULL>
		<INNER public="1" line="8" static="1"><c path="String"/></INNER>
		<OUTER public="1" line="9" static="1"><c path="String"/></OUTER>
	</class>
	<class path="nme.events.KeyboardEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/KeyboardEvent.hx">
		<extends path="nme.events.Event"/>
		<KEY_DOWN public="1" line="8" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" line="9" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><e path="Bool"/></altKey>
		<charCode public="1"><c path="Int"/></charCode>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<keyCode public="1"><c path="Int"/></keyCode>
		<keyLocation public="1"><c path="Int"/></keyLocation>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="33" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="39" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="19"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue:?controlKeyValue:?commandKeyValue">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.utils.Endian" params="" file="D:\Development\Haxe\nekonme/nme/utils/Endian.hx">
		<BIG_ENDIAN public="1" get="inline" set="null" line="8" static="1"><c path="String"/></BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" get="inline" set="null" line="9" static="1"><c path="String"/></LITTLE_ENDIAN>
	</class>
	<class path="nme.display.Bitmap" params="" file="D:\Development\Haxe\nekonme/nme/display/Bitmap.hx">
		<extends path="nme.display.DisplayObject"/>
		<bitmapData public="1" set="nmeSetBitmapData">
			<c path="nme.display.BitmapData"/>
			<haxe_doc>
	 * You can set the bitmapData property to change which image
	 * is displayed in the Bitmap. BitmapData objects can be shared
	 * between multiple Bitmap instances to improve performance
	 * and reduce memory usage.
	 </haxe_doc>
		</bitmapData>
		<pixelSnapping public="1">
			<e path="nme.display.PixelSnapping"/>
			<haxe_doc>
	 * Adjust the type of pixel snapping used when rendering the image
	 </haxe_doc>
		</pixelSnapping>
		<smoothing public="1" set="nmeSetSmoothing">
			<e path="Bool"/>
			<haxe_doc>
	 * Adjust whether the image should be rendered with smoothing
	 </haxe_doc>
		</smoothing>
		<mGraphics><c path="nme.display.Graphics"/></mGraphics>
		<nmeRebuid set="method" line="44"><f a=""><e path="Void"/></f></nmeRebuid>
		<nmeSetBitmapData set="method" line="63"><f a="inBitmapData">
	<c path="nme.display.BitmapData"/>
	<c path="nme.display.BitmapData"/>
</f></nmeSetBitmapData>
		<nmeSetSmoothing set="method" line="72"><f a="inSmooth">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetSmoothing>
		<new public="1" set="method" line="33"><f a="?inBitmapData:?inPixelSnapping:?inSmoothing">
	<c path="nme.display.BitmapData"/>
	<e path="nme.display.PixelSnapping"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.StageScaleMode" params="" file="D:\Development\Haxe\nekonme/nme/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
	</enum>
	<class path="nme.media.SoundLoaderContext" params="" file="D:\Development\Haxe\nekonme/nme/media/SoundLoaderContext.hx"><new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new></class>
	<class path="nme.text.TextField" params="" file="D:\Development\Haxe\nekonme/nme/text/TextField.hx">
		<extends path="nme.display.InteractiveObject"/>
		<nme_text_field_create line="118" static="1"><f a=""><unknown/></f></nme_text_field_create>
		<nme_text_field_get_text line="119" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_text>
		<nme_text_field_set_text line="120" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_text>
		<nme_text_field_get_html_text line="121" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_html_text>
		<nme_text_field_set_html_text line="122" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_html_text>
		<nme_text_field_get_text_color line="123" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_text_color>
		<nme_text_field_set_text_color line="124" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_color>
		<nme_text_field_get_selectable line="125" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_selectable>
		<nme_text_field_set_selectable line="126" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_selectable>
		<nme_text_field_get_display_as_password line="127" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_display_as_password>
		<nme_text_field_set_display_as_password line="128" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_display_as_password>
		<nme_text_field_get_def_text_format line="129" static="1"><f a=":">
	<d/>
	<c path="nme.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_get_def_text_format>
		<nme_text_field_set_def_text_format line="130" static="1"><f a=":">
	<d/>
	<c path="nme.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_set_def_text_format>
		<nme_text_field_get_auto_size line="131" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_auto_size>
		<nme_text_field_set_auto_size line="132" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_auto_size>
		<nme_text_field_get_type line="133" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_type>
		<nme_text_field_set_type line="134" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_type>
		<nme_text_field_get_multiline line="135" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_multiline>
		<nme_text_field_set_multiline line="136" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_multiline>
		<nme_text_field_get_word_wrap line="137" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_word_wrap>
		<nme_text_field_set_word_wrap line="138" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_word_wrap>
		<nme_text_field_get_border line="139" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_border>
		<nme_text_field_set_border line="140" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_border>
		<nme_text_field_get_border_color line="141" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_border_color>
		<nme_text_field_set_border_color line="142" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_border_color>
		<nme_text_field_get_background line="143" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_background>
		<nme_text_field_set_background line="144" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_background>
		<nme_text_field_get_background_color line="145" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_background_color>
		<nme_text_field_set_background_color line="146" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_background_color>
		<nme_text_field_get_text_width line="147" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_text_field_get_text_width>
		<nme_text_field_get_text_height line="148" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_text_field_get_text_height>
		<nme_text_field_set_text_format line="149" static="1"><f a=":::">
	<d/>
	<c path="nme.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_format>
		<nme_text_field_get_max_scroll_v line="150" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_scroll_v>
		<nme_text_field_get_max_scroll_h line="151" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_scroll_h>
		<nme_text_field_get_bottom_scroll_v line="152" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_bottom_scroll_v>
		<nme_text_field_get_scroll_h line="153" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_scroll_h>
		<nme_text_field_set_scroll_h line="154" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_h>
		<nme_text_field_get_scroll_v line="155" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_scroll_v>
		<nme_text_field_set_scroll_v line="156" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_v>
		<nme_text_field_get_num_lines line="157" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_num_lines>
		<nme_text_field_get_max_chars line="158" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_chars>
		<nme_text_field_set_max_chars line="159" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_max_chars>
		<autoSize public="1" get="nmeGetAutoSize" set="nmeSetAutoSize"><e path="nme.text.TextFieldAutoSize"/></autoSize>
		<background public="1" get="nmeGetBackground" set="nmeSetBackground"><e path="Bool"/></background>
		<backgroundColor public="1" get="nmeGetBackgroundColor" set="nmeSetBackgroundColor"><c path="Int"/></backgroundColor>
		<border public="1" get="nmeGetBorder" set="nmeSetBorder"><e path="Bool"/></border>
		<borderColor public="1" get="nmeGetBorderColor" set="nmeSetBorderColor"><c path="Int"/></borderColor>
		<bottomScrollV public="1" get="nmeGetBottomScrollV" set="null"><c path="Int"/></bottomScrollV>
		<defaultTextFormat public="1" get="nmeGetDefaultTextFormat" set="nmeSetDefaultTextFormat"><c path="nme.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1" get="nmeGetDisplayAsPassword" set="nmeSetDisplayAsPassword"><e path="Bool"/></displayAsPassword>
		<embedFonts public="1" get="nmeGetEmbedFonts" set="nmeSetEmbedFonts"><e path="Bool"/></embedFonts>
		<htmlText public="1" get="nmeGetHTMLText" set="nmeSetHTMLText"><c path="String"/></htmlText>
		<maxChars public="1" get="nmeGetMaxChars" set="nmeSetMaxChars"><c path="Int"/></maxChars>
		<maxScrollH public="1" get="nmeGetMaxScrollH" set="null"><c path="Int"/></maxScrollH>
		<maxScrollV public="1" get="nmeGetMaxScrollV" set="null"><c path="Int"/></maxScrollV>
		<multiline public="1" get="nmeGetMultiline" set="nmeSetMultiline"><e path="Bool"/></multiline>
		<numLines public="1" get="nmeGetNumLines" set="null"><c path="Int"/></numLines>
		<scrollH public="1" get="nmeGetScrollH" set="nmeSetScrollH"><c path="Int"/></scrollH>
		<scrollV public="1" get="nmeGetScrollV" set="nmeSetScrollV"><c path="Int"/></scrollV>
		<selectable public="1" get="nmeGetSelectable" set="nmeSetSelectable"><e path="Bool"/></selectable>
		<text public="1" get="nmeGetText" set="nmeSetText"><c path="String"/></text>
		<textColor public="1" get="nmeGetTextColor" set="nmeSetTextColor"><c path="Int"/></textColor>
		<textHeight public="1" get="nmeGetTextHeight" set="null"><c path="Float"/></textHeight>
		<textWidth public="1" get="nmeGetTextWidth" set="null"><c path="Float"/></textWidth>
		<type public="1" get="nmeGetType" set="nmeSetType"><e path="nme.text.TextFieldType"/></type>
		<wordWrap public="1" get="nmeGetWordWrap" set="nmeSetWordWrap"><e path="Bool"/></wordWrap>
		<appendText public="1" set="method" line="45"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></appendText>
		<setSelection public="1" set="method" line="51"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method" line="58"><f a="format:?beginIndex:?endIndex">
	<c path="nme.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setTextFormat>
		<nmeGetAutoSize set="method" line="69"><f a=""><e path="nme.text.TextFieldAutoSize"/></f></nmeGetAutoSize>
		<nmeSetAutoSize set="method" line="70"><f a="inVal">
	<e path="nme.text.TextFieldAutoSize"/>
	<e path="nme.text.TextFieldAutoSize"/>
</f></nmeSetAutoSize>
		<nmeGetBackground set="method" line="71"><f a=""><e path="Bool"/></f></nmeGetBackground>
		<nmeSetBackground set="method" line="72"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetBackground>
		<nmeGetBackgroundColor set="method" line="73"><f a=""><c path="Int"/></f></nmeGetBackgroundColor>
		<nmeSetBackgroundColor set="method" line="74"><f a="inVal">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetBackgroundColor>
		<nmeGetBorder set="method" line="75"><f a=""><e path="Bool"/></f></nmeGetBorder>
		<nmeSetBorder set="method" line="76"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetBorder>
		<nmeGetBorderColor set="method" line="77"><f a=""><c path="Int"/></f></nmeGetBorderColor>
		<nmeSetBorderColor set="method" line="78"><f a="inVal">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetBorderColor>
		<nmeGetBottomScrollV set="method" line="79"><f a=""><c path="Int"/></f></nmeGetBottomScrollV>
		<nmeGetDefaultTextFormat set="method" line="80"><f a=""><c path="nme.text.TextFormat"/></f></nmeGetDefaultTextFormat>
		<nmeSetDefaultTextFormat set="method" line="81"><f a="inFormat">
	<c path="nme.text.TextFormat"/>
	<c path="nme.text.TextFormat"/>
</f></nmeSetDefaultTextFormat>
		<nmeGetDisplayAsPassword set="method" line="82"><f a=""><e path="Bool"/></f></nmeGetDisplayAsPassword>
		<nmeSetDisplayAsPassword set="method" line="83"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetDisplayAsPassword>
		<nmeGetEmbedFonts set="method" line="84"><f a=""><e path="Bool"/></f></nmeGetEmbedFonts>
		<nmeSetEmbedFonts set="method" line="85"><f a="value">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetEmbedFonts>
		<nmeGetHTMLText set="method" line="86"><f a=""><c path="String"/></f></nmeGetHTMLText>
		<nmeSetHTMLText set="method" line="87"><f a="inText">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetHTMLText>
		<nmeGetMaxChars set="method" line="88"><f a=""><c path="Int"/></f></nmeGetMaxChars>
		<nmeSetMaxChars set="method" line="89"><f a="inVal">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetMaxChars>
		<nmeGetMaxScrollH set="method" line="90"><f a=""><c path="Int"/></f></nmeGetMaxScrollH>
		<nmeGetMaxScrollV set="method" line="91"><f a=""><c path="Int"/></f></nmeGetMaxScrollV>
		<nmeGetMultiline set="method" line="92"><f a=""><e path="Bool"/></f></nmeGetMultiline>
		<nmeSetMultiline set="method" line="93"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetMultiline>
		<nmeGetNumLines set="method" line="94"><f a=""><c path="Int"/></f></nmeGetNumLines>
		<nmeGetScrollH set="method" line="95"><f a=""><c path="Int"/></f></nmeGetScrollH>
		<nmeSetScrollH set="method" line="96"><f a="inVal">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetScrollH>
		<nmeGetScrollV set="method" line="97"><f a=""><c path="Int"/></f></nmeGetScrollV>
		<nmeSetScrollV set="method" line="98"><f a="inVal">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetScrollV>
		<nmeGetSelectable set="method" line="99"><f a=""><e path="Bool"/></f></nmeGetSelectable>
		<nmeSetSelectable set="method" line="100"><f a="inSel">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetSelectable>
		<nmeGetText set="method" line="101"><f a=""><c path="String"/></f></nmeGetText>
		<nmeSetText set="method" line="102"><f a="inText">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetText>
		<nmeGetTextColor set="method" line="103"><f a=""><c path="Int"/></f></nmeGetTextColor>
		<nmeSetTextColor set="method" line="104"><f a="inCol">
	<c path="Int"/>
	<c path="Int"/>
</f></nmeSetTextColor>
		<nmeGetTextWidth set="method" line="105"><f a=""><c path="Float"/></f></nmeGetTextWidth>
		<nmeGetTextHeight set="method" line="106"><f a=""><c path="Float"/></f></nmeGetTextHeight>
		<nmeGetType set="method" line="107"><f a=""><e path="nme.text.TextFieldType"/></f></nmeGetType>
		<nmeSetType set="method" line="108"><f a="inType">
	<e path="nme.text.TextFieldType"/>
	<e path="nme.text.TextFieldType"/>
</f></nmeSetType>
		<nmeGetWordWrap set="method" line="109"><f a=""><e path="Bool"/></f></nmeGetWordWrap>
		<nmeSetWordWrap set="method" line="110"><f a="inVal">
	<e path="Bool"/>
	<e path="Bool"/>
</f></nmeSetWordWrap>
		<new public="1" set="method" line="38"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.display.SimpleButton" params="" file="D:\Development\Haxe\nekonme/nme/display/SimpleButton.hx">
		<extends path="nme.display.InteractiveObject"/>
		<nme_simple_button_set_state line="115" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<d/>
	<unknown/>
</f></nme_simple_button_set_state>
		<nme_simple_button_get_enabled line="116" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_simple_button_get_enabled>
		<nme_simple_button_set_enabled line="117" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_simple_button_set_enabled>
		<nme_simple_button_get_hand_cursor line="118" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_simple_button_get_hand_cursor>
		<nme_simple_button_set_hand_cursor line="119" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_simple_button_set_hand_cursor>
		<nme_simple_button_create line="120" static="1"><f a=""><unknown/></f></nme_simple_button_create>
		<downState public="1" set="nmeSetDownState"><c path="nme.display.DisplayObject"/></downState>
		<enabled public="1" get="nmeGetEnabled" set="nmeSetEnabled"><e path="Bool"/></enabled>
		<hitTestState public="1" set="nmeSetHitTestState"><c path="nme.display.DisplayObject"/></hitTestState>
		<overState public="1" set="nmeSetOverState"><c path="nme.display.DisplayObject"/></overState>
		<upState public="1" set="nmeSetUpState"><c path="nme.display.DisplayObject"/></upState>
		<useHandCursor public="1" get="nmeGetHandCursor" set="nmeSetHandCursor"><e path="Bool"/></useHandCursor>
		<nmeSetDownState public="1" set="method" line="39">
			<f a="inState">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetDownState>
		<nmeGetEnabled public="1" set="method" line="50">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetEnabled>
		<nmeSetEnabled public="1" set="method" line="55">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetEnabled>
		<nmeGetHandCursor public="1" set="method" line="65">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetHandCursor>
		<nmeSetHandCursor public="1" set="method" line="70">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetHandCursor>
		<nmeSetHitTestState public="1" set="method" line="80">
			<f a="inState">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetHitTestState>
		<nmeSetOverState public="1" set="method" line="91">
			<f a="inState">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetOverState>
		<nmeSetUpState public="1" set="method" line="102">
			<f a="inState">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetUpState>
		<new public="1" set="method" line="21"><f a="?upState:?overState:?downState:?hitTestState">
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
	<c path="nme.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="cpp.rtti.FieldNumericIntegerLookup" params="" file="C:\Motion-Twin\haxe/std/cpp/rtti/FieldNumericIntegerLookup.hx" interface="1"><haxe_doc>
	If you implement this interface, then the backend will generate code that
	allows fast numeric access to fields by integer id.  This should speed up the CFFI.
</haxe_doc></class>
	<class path="nme.geom.Matrix" params="" file="D:\Development\Haxe\nekonme/nme/geom/Matrix.hx">
		<implements path="cpp.rtti.FieldNumericIntegerLookup"/>
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<clone public="1" set="method" line="37"><f a=""><c path="nme.geom.Matrix"/></f></clone>
		<concat public="1" set="method" line="57"><f a="m">
	<c path="nme.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<createBox public="1" set="method" line="74"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method" line="84"><f a="in_width:in_height:?rotation:?in_tx:?in_ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<identity public="1" set="method" line="109"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method" line="120"><f a=""><c path="nme.geom.Matrix"/></f></invert>
		<mult public="1" set="method" line="148"><f a="m">
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.Matrix"/>
</f></mult>
		<rotate public="1" set="method" line="176"><f a="inTheta">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<scale public="1" set="method" line="202"><f a="inSX:inSY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<setRotation public="1" set="method" line="215"><f a="inTheta:?inScale">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setRotation>
		<transformPoint public="1" set="method" line="225"><f a="inPos">
	<c path="nme.geom.Point"/>
	<c path="nme.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method" line="231"><f a="inDX:inDY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<new public="1" set="method" line="26"><f a="?in_a:?in_b:?in_c:?in_d:?in_tx:?in_ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author	Hugh Sanderson
* @author	Russell Weir
</haxe_doc>
	</class>
	<class path="Math" params="" file="C:\Motion-Twin\haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="nme.utils.WeakRef" params="T" file="D:\Development\Haxe\nekonme/nme/utils/WeakRef.hx">
		<nme_weak_ref_create line="60" static="1"><f a=":">
	<c path="nme.utils.WeakRef"><c path="nme.utils.WeakRef.T"/></c>
	<c path="nme.utils.WeakRef.T"/>
	<c path="Int"/>
</f></nme_weak_ref_create>
		<nme_weak_ref_get line="61" static="1"><f a="">
	<c path="Int"/>
	<c path="nme.utils.WeakRef.T"/>
</f></nme_weak_ref_get>
		<hardRef><c path="nme.utils.WeakRef.T"/></hardRef>
		<weakRef><c path="Int"/></weakRef>
		<get public="1" set="method" line="31"><f a=""><c path="nme.utils.WeakRef.T"/></f></get>
		<toString public="1" set="method" line="46"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="16"><f a="inObject:?inMakeWeak">
	<c path="nme.utils.WeakRef.T"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.format.swf.FrameLabels" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Sprite.hx" module="nme.format.swf.Sprite"><c path="Hash"><c path="Int"/></c></typedef>
	<class path="nme.format.swf.Sprite" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Sprite.hx">
		<mSWF public="1" set="null"><c path="nme.format.SWF"/></mSWF>
		<mFrames public="1" set="null"><t path="nme.format.swf.Frames"/></mFrames>
		<mFrameCount><c path="Int"/></mFrameCount>
		<mFrame><c path="nme.format.swf.Frame"/></mFrame>
		<mFrameLabels><t path="nme.format.swf.FrameLabels"/></mFrameLabels>
		<mName><c path="String"/></mName>
		<mClassName><c path="String"/></mClassName>
		<mBlendMode><e path="nme.display.BlendMode"/></mBlendMode>
		<mCacheAsBitmap><e path="Bool"/></mCacheAsBitmap>
		<mFilters><c path="Array"><c path="nme.filters.BitmapFilter"/></c></mFilters>
		<GetFrameCount public="1" set="method" line="43"><f a=""><c path="Int"/></f></GetFrameCount>
		<LabelFrame public="1" set="method" line="45"><f a="inName">
	<c path="String"/>
	<e path="Void"/>
</f></LabelFrame>
		<ShowFrame public="1" set="method" line="50"><f a=""><e path="Void"/></f></ShowFrame>
		<RemoveObject public="1" set="method" line="56"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></RemoveObject>
		<PlaceObject public="1" set="method" line="64"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></PlaceObject>
		<CreateDropShadowFilter set="method" line="202"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateDropShadowFilter>
		<CreateBlurFilter set="method" line="208"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateBlurFilter>
		<CreateGlowFilter set="method" line="218"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateGlowFilter>
		<CreateBevelFilter set="method" line="224"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateBevelFilter>
		<CreateGradientGlowFilter set="method" line="230"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateGradientGlowFilter>
		<CreateConvolutionFilter set="method" line="236"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateConvolutionFilter>
		<CreateColorMatrixFilter set="method" line="250"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateColorMatrixFilter>
		<CreateGradientBevelFilter set="method" line="260"><f a="inStream">
	<c path="nme.format.swf.SWFStream"/>
	<c path="nme.filters.BitmapFilter"/>
</f></CreateGradientBevelFilter>
		<new public="1" set="method" line="30"><f a="inSWF:inID:inFrameCount">
	<c path="nme.format.SWF"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.ui.Multitouch" params="" file="D:\Development\Haxe\nekonme/nme/ui/Multitouch.hx">
		<inputMode public="1" get="nmeGetInputMode" set="nmeSetInputMode" static="1"><e path="nme.ui.MultitouchInputMode"/></inputMode>
		<maxTouchPoints public="1" set="null" static="1"><c path="Int"/></maxTouchPoints>
		<supportedGestures public="1" set="null" static="1"><c path="Array"><c path="String"/></c></supportedGestures>
		<supportsGestureEvents public="1" set="null" static="1"><e path="Bool"/></supportsGestureEvents>
		<supportsTouchEvents public="1" get="nmeGetSupportsTouchEvents" set="null" static="1"><e path="Bool"/></supportsTouchEvents>
		<nmeGetInputMode set="method" line="32" static="1"><f a=""><e path="nme.ui.MultitouchInputMode"/></f></nmeGetInputMode>
		<nmeSetInputMode set="method" line="42" static="1"><f a="inMode">
	<e path="nme.ui.MultitouchInputMode"/>
	<e path="nme.ui.MultitouchInputMode"/>
</f></nmeSetInputMode>
		<nmeGetSupportsTouchEvents set="method" line="53" static="1"><f a=""><e path="Bool"/></f></nmeGetSupportsTouchEvents>
		<nme_stage_get_multitouch_supported line="61" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_get_multitouch_supported>
		<nme_stage_get_multitouch_active line="62" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_get_multitouch_active>
		<nme_stage_set_multitouch_active line="63" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_stage_set_multitouch_active>
	</class>
	<enum path="nme.display.TriangleCulling" params="" file="D:\Development\Haxe\nekonme/nme/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
	</enum>
	<enum path="nme.display.LineScaleMode" params="" file="D:\Development\Haxe\nekonme/nme/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
	</enum>
	<class path="nme.display.MovieClip" params="" file="D:\Development\Haxe\nekonme/nme/display/MovieClip.hx">
		<extends path="nme.display.Sprite"/>
		<count line="15" static="1"><c path="Int"/></count>
		<mMovieID line="16" static="1"><c path="Int"/></mMovieID>
		<mIDBase line="17" static="1"><c path="Int"/></mIDBase>
		<currentFrame public="1" get="nmeGetCurrentFrame" set="null"><c path="Int"/></currentFrame>
		<enabled public="1"><e path="Bool"/></enabled>
		<framesLoaded public="1" get="nmeGetTotalFrames" set="null"><c path="Int"/></framesLoaded>
		<totalFrames public="1" get="nmeGetTotalFrames" set="null"><c path="Int"/></totalFrames>
		<mActive><t path="nme.display.ActiveObjects"/></mActive>
		<mCurrentFrame><c path="Int"/></mCurrentFrame>
		<mFrames><t path="nme.format.swf.Frames"/></mFrames>
		<mObjectPool><t path="nme.display.ObjectPool"/></mObjectPool>
		<mPlaying><e path="Bool"/></mPlaying>
		<mTotalFrames><c path="Int"/></mTotalFrames>
		<gotoAndPlay public="1" set="method" line="45"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method" line="53"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<nmeCreateFromSWF public="1" set="method" line="64">
			<f a="inSprite">
				<c path="nme.format.swf.Sprite"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeCreateFromSWF>
		<nmeGetType set="method" line="76" override="1"><f a=""><c path="String"/></f></nmeGetType>
		<play public="1" set="method" line="82"><f a=""><e path="Void"/></f></play>
		<stop public="1" set="method" line="96"><f a=""><e path="Void"/></f></stop>
		<updateActive set="method" line="103"><f a=""><e path="Void"/></f></updateActive>
		<this_onEnterFrame set="method" line="275"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></this_onEnterFrame>
		<nmeGetCurrentFrame set="method" line="293"><f a=""><c path="Int"/></f></nmeGetCurrentFrame>
		<nmeGetTotalFrames set="method" line="294"><f a=""><c path="Int"/></f></nmeGetTotalFrames>
		<new public="1" set="method" line="32"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="nme.display.ActiveObject" params="" file="D:\Development\Haxe\nekonme/nme/display/MovieClip.hx" module="nme.display.MovieClip"><a>
	<mWaitingLoader><e path="Bool"/></mWaitingLoader>
	<mObj><t path="flash.display.DisplayObject"/></mObj>
	<mIndex><c path="Int"/></mIndex>
	<mID><c path="Int"/></mID>
	<mDepth><c path="Int"/></mDepth>
</a></typedef>
	<typedef path="nme.display.ActiveObjects" params="" file="D:\Development\Haxe\nekonme/nme/display/MovieClip.hx" module="nme.display.MovieClip"><c path="Array"><t path="nme.display.ActiveObject"/></c></typedef>
	<typedef path="nme.display.ObjectList" params="" file="D:\Development\Haxe\nekonme/nme/display/MovieClip.hx" module="nme.display.MovieClip"><c path="List"><c path="nme.display.DisplayObject"/></c></typedef>
	<typedef path="nme.display.ObjectPool" params="" file="D:\Development\Haxe\nekonme/nme/display/MovieClip.hx" module="nme.display.MovieClip"><c path="IntHash"><t path="nme.display.ObjectList"/></c></typedef>
	<class path="nme.media.SoundTransform" params="" file="D:\Development\Haxe\nekonme/nme/media/SoundTransform.hx">
		<pan public="1"><c path="Float"/></pan>
		<volume public="1"><c path="Float"/></volume>
		<clone public="1" set="method" line="19"><f a=""><c path="nme.media.SoundTransform"/></f></clone>
		<new public="1" set="method" line="12"><f a="?vol:?panning">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Std" params="" file="C:\Motion-Twin\haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="nme.display.FPS" params="" file="D:\Development\Haxe\nekonme/nme/display/FPS.hx">
		<extends path="nme.text.TextField"/>
		<times><c path="Array"><c path="Float"/></c></times>
		<onEnter set="method" line="35"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></onEnter>
		<new public="1" set="method" line="15"><f a="?inX:?inY:?inCol">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.ui.Mouse" params="" file="D:\Development\Haxe\nekonme/nme/ui/Mouse.hx">
		<hide public="1" set="method" line="8" static="1"><f a=""><e path="Void"/></f></hide>
		<show public="1" set="method" line="15" static="1"><f a=""><e path="Void"/></f></show>
	</class>
	<typedef path="haxe.TimerList" params="" file="D:\Development\Haxe\nekonme/haxe/Timer.hx" module="haxe.Timer"><c path="Array"><c path="haxe.Timer"/></c></typedef>
	<class path="haxe.Timer" params="" file="D:\Development\Haxe\nekonme/haxe/Timer.hx">
		<sRunningTimers line="107" static="1"><t path="haxe.TimerList"/></sRunningTimers>
		<nmeNextWake public="1" set="method" line="144" static="1"><f a="limit">
	<c path="Float"/>
	<c path="Float"/>
</f></nmeNextWake>
		<nmeCheckTimers public="1" set="method" line="183" static="1"><f a=""><e path="Void"/></f></nmeCheckTimers>
		<GetMS set="method" line="196" static="1"><f a=""><c path="Float"/></f></GetMS>
		<delay public="1" set="method" line="204" static="1"><f a="f:time">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="218" static="1"><f a=""><c path="Float"/></f></stamp>
		<nme_time_stamp line="225" static="1"><f a=""><c path="Float"/></f></nme_time_stamp>
		<mTime><c path="Float"/></mTime>
		<mFireAt><c path="Float"/></mFireAt>
		<mRunning><e path="Bool"/></mRunning>
		<run public="1" set="dynamic" line="125"><f a=""><e path="Void"/></f></run>
		<stop public="1" set="method" line="132"><f a=""><e path="Void"/></f></stop>
		<nmeCheck set="method" line="171"><f a="inTime">
	<c path="Float"/>
	<e path="Void"/>
</f></nmeCheck>
		<new public="1" set="method" line="114"><f a="time">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.sensors.Accelerometer" params="" file="D:\Development\Haxe\nekonme/nme/sensors/Accelerometer.hx">
		<extends path="nme.events.EventDispatcher"/>
		<isSupported public="1" get="nmeGetIsSupported" set="null" static="1"><e path="Bool"/></isSupported>
		<defaultInterval line="19" static="1"><c path="Int"/></defaultInterval>
		<nmeGetIsSupported set="method" line="84" static="1"><f a=""><e path="Bool"/></f></nmeGetIsSupported>
		<nme_input_get_acceleration line="92" static="1"><f a=""><a>
	<z set="null"><c path="Float"/></z>
	<y set="null"><c path="Float"/></y>
	<x set="null"><c path="Float"/></x>
</a></f></nme_input_get_acceleration>
		<muted public="1" set="null"><e path="Bool"/></muted>
		<timer><c path="haxe.Timer"/></timer>
		<addEventListener public="1" set="method" line="32" override="1"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="nme.sensors.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<setRequestedUpdateInterval public="1" set="method" line="40"><f a="interval">
	<c path="Float"/>
	<e path="Void"/>
</f></setRequestedUpdateInterval>
		<update set="method" line="64"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="24"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="nme.sensors.Function" params="" file="D:\Development\Haxe\nekonme/nme/sensors/Accelerometer.hx" module="nme.sensors.Accelerometer"><f a="">
	<d/>
	<e path="Void"/>
</f></typedef>
	<typedef path="flash.events.Event" params="" file="D:\Development\Haxe\nekonme/nme/events/Event.hx"><c path="nme.events.Event"/></typedef>
	<class path="nme.filters.BitmapFilter" params="" file="D:\Development\Haxe\nekonme/nme/filters/BitmapFilter.hx">
		<type><c path="String"/></type>
		<clone public="1" set="method" line="17"><f a=""><c path="nme.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method" line="11"><f a="inType">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.EventPhase" params="" file="D:\Development\Haxe\nekonme/nme/events/EventPhase.hx">
		<CAPTURING_PHASE public="1" line="7" static="1"><c path="Int"/></CAPTURING_PHASE>
		<AT_TARGET public="1" line="8" static="1"><c path="Int"/></AT_TARGET>
		<BUBBLING_PHASE public="1" line="9" static="1"><c path="Int"/></BUBBLING_PHASE>
	</class>
	<class path="cpp.zip.Uncompress" params="" file="C:\Motion-Twin\haxe/std/cpp/zip/Uncompress.hx">
		<run public="1" set="method" line="46" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init line="64" static="1"><f a="">
	<t path="Null"><c path="Int"/></t>
	<unknown/>
</f></_inflate_init>
		<_inflate_buffer line="65" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></_inflate_buffer>
		<_inflate_end line="66" static="1"><f a="">
	<d/>
	<unknown/>
</f></_inflate_end>
		<_set_flush_mode line="67" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<this_run public="1" set="method" line="34"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></this_run>
		<setFlushMode public="1" set="method" line="38"><f a="f">
	<e path="cpp.zip.Flush"/>
	<e path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="42"><f a=""><e path="Void"/></f></close>
		<new public="1" set="method" line="30"><f a="windowBits">
	<t path="Null"><c path="Int"/></t>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.errors.RangeError" params="" file="D:\Development\Haxe\nekonme/nme/errors/RangeError.hx">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method" line="7"><f a="?inMessage">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.filters.DropShadowFilter" params="" file="D:\Development\Haxe\nekonme/nme/filters/DropShadowFilter.hx">
		<extends path="nme.filters.BitmapFilter"/>
		<alpha><c path="Float"/></alpha>
		<angle><c path="Float"/></angle>
		<blurX><c path="Float"/></blurX>
		<blurY><c path="Float"/></blurY>
		<color><c path="Int"/></color>
		<distance><c path="Float"/></distance>
		<hideObject><e path="Bool"/></hideObject>
		<inner><e path="Bool"/></inner>
		<knockout><e path="Bool"/></knockout>
		<quality><c path="Int"/></quality>
		<strength><c path="Float"/></strength>
		<clone public="1" set="method" line="39" override="1"><f a=""><c path="nme.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method" line="21"><f a="?in_distance:?in_angle:?in_color:?in_alpha:?in_blurX:?in_blurY:?in_strength:?in_quality:?in_inner:?in_knockout:?in_hideObject">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.filters.BitmapFilterQuality" params="" file="D:\Development\Haxe\nekonme/nme/filters/BitmapFilterQuality.hx">
		<HIGH public="1" line="7" static="1"><c path="Int"/></HIGH>
		<MEDIUM public="1" line="8" static="1"><c path="Int"/></MEDIUM>
		<LOW public="1" line="9" static="1"><c path="Int"/></LOW>
	</class>
	<typedef path="nme.format.swf.FontCommand" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Font.hx" module="nme.format.swf.Font"><f a=":">
	<c path="nme.display.Graphics"/>
	<c path="nme.geom.Matrix"/>
	<e path="Void"/>
</f></typedef>
	<typedef path="nme.format.swf.FontCommands" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Font.hx" module="nme.format.swf.Font"><c path="Array"><t path="nme.format.swf.FontCommand"/></c></typedef>
	<typedef path="nme.format.swf.Glyph" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Font.hx" module="nme.format.swf.Font"><a>
	<mCommands><t path="nme.format.swf.FontCommands"/></mCommands>
	<mAdvance><c path="Float"/></mAdvance>
</a></typedef>
	<typedef path="nme.format.swf.Glyphs" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Font.hx" module="nme.format.swf.Font"><c path="Array"><t path="nme.format.swf.Glyph"/></c></typedef>
	<class path="nme.format.swf.Font" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Font.hx">
		<mGlyphs><t path="nme.format.swf.Glyphs"/></mGlyphs>
		<mCodeToGlyph><t path="nme.format.swf.Glyphs"/></mCodeToGlyph>
		<mName><c path="String"/></mName>
		<mAscent><c path="Float"/></mAscent>
		<mDescent><c path="Float"/></mDescent>
		<mLeading><c path="Float"/></mLeading>
		<mAdvance><c path="Array"><c path="Float"/></c></mAdvance>
		<RestoreLineStyle set="method" line="231"><f a="g">
	<c path="nme.display.Graphics"/>
	<e path="Void"/>
</f></RestoreLineStyle>
		<Ok public="1" set="method" line="236"><f a=""><e path="Bool"/></f></Ok>
		<GetName public="1" set="method" line="240"><f a=""><c path="String"/></f></GetName>
		<RenderChar public="1" set="method" line="242"><f a="inGraphics:inChar:m">
	<c path="nme.display.Graphics"/>
	<c path="Int"/>
	<c path="nme.geom.Matrix"/>
	<c path="Float"/>
</f></RenderChar>
		<RenderGlyph public="1" set="method" line="258"><f a="inGraphics:inGlyph:m">
	<c path="nme.display.Graphics"/>
	<c path="Int"/>
	<c path="nme.geom.Matrix"/>
	<e path="Void"/>
</f></RenderGlyph>
		<GetAdvance public="1" set="method" line="272"><f a="inChar:?inNext">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
</f></GetAdvance>
		<GetAscent public="1" set="method" line="284"><f a=""><c path="Float"/></f></GetAscent>
		<GetDescent public="1" set="method" line="285"><f a=""><c path="Float"/></f></GetDescent>
		<GetLeading public="1" set="method" line="286"><f a=""><c path="Float"/></f></GetLeading>
		<new public="1" set="method" line="29"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="Void" params="" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<enum path="nme.text.TextFieldAutoSize" params="" file="D:\Development\Haxe\nekonme/nme/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
	</enum>
	<typedef path="cpp.Int32" params="" file="C:\Motion-Twin\haxe/std/cpp/CppInt32__.hx" module="cpp.CppInt32__"><c path="cpp.CppInt32__"/></typedef>
	<class path="cpp.CppInt32__" params="" file="C:\Motion-Twin\haxe/std/cpp/CppInt32__.hx" extern="1">
		<make public="1" set="method" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<t path="cpp.Int32"/>
</f></make>
		<ofInt public="1" set="method" static="1"><f a="x">
	<c path="Int"/>
	<t path="cpp.Int32"/>
</f></ofInt>
		<toInt public="1" set="method" static="1"><f a="x">
	<t path="cpp.Int32"/>
	<c path="Int"/>
</f></toInt>
		<add public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></add>
		<sub public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></sub>
		<mul public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></mul>
		<div public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></div>
		<mod public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></mod>
		<shl public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<c path="Int"/>
	<t path="cpp.Int32"/>
</f></shl>
		<shr public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<c path="Int"/>
	<t path="cpp.Int32"/>
</f></shr>
		<ushr public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<c path="Int"/>
	<t path="cpp.Int32"/>
</f></ushr>
		<and public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></and>
		<or public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></or>
		<xor public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></xor>
		<neg public="1" set="method" static="1"><f a="a">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></neg>
		<complement public="1" set="method" static="1"><f a="a">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
</f></complement>
		<compare public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<c path="Int"/>
</f></compare>
		<isNeg public="1" set="method" static="1"><f a="a">
	<t path="cpp.Int32"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" set="method" static="1"><f a="a">
	<t path="cpp.Int32"/>
	<e path="Bool"/>
</f></isZero>
		<ucompare public="1" set="method" static="1"><f a="a:b">
	<t path="cpp.Int32"/>
	<t path="cpp.Int32"/>
	<c path="Int"/>
</f></ucompare>
	</class>
	<enum path="nme.text.FontType" params="" file="D:\Development\Haxe\nekonme/nme/text/FontType.hx">
		<EMBEDDED_CFF/>
		<EMBEDDED/>
		<DEVICE/>
	</enum>
	<class path="cpp.Sys" params="" file="C:\Motion-Twin\haxe/std/cpp/Sys.hx">
		<args public="1" set="method" line="5" static="1"><f a=""><c path="Array"><c path="String"/></c></f></args>
		<getEnv public="1" set="method" line="9" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></getEnv>
		<putEnv public="1" set="method" line="16" static="1"><f a="s:v">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></putEnv>
		<sleep public="1" set="method" line="20" static="1"><f a="seconds">
	<c path="Float"/>
	<e path="Void"/>
</f></sleep>
		<setTimeLocale public="1" set="method" line="24" static="1"><f a="loc">
	<c path="String"/>
	<e path="Bool"/>
</f></setTimeLocale>
		<getCwd public="1" set="method" line="28" static="1"><f a=""><c path="String"/></f></getCwd>
		<setCwd public="1" set="method" line="32" static="1"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></setCwd>
		<systemName public="1" set="method" line="36" static="1"><f a=""><c path="String"/></f></systemName>
		<escapeArgument public="1" set="method" line="40" static="1"><f a="arg">
	<c path="String"/>
	<c path="String"/>
</f></escapeArgument>
		<command public="1" set="method" line="54" static="1"><f a="cmd:?args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="Int"/>
</f></command>
		<exit public="1" set="method" line="63" static="1"><f a="code">
	<c path="Int"/>
	<e path="Void"/>
</f></exit>
		<time public="1" set="method" line="67" static="1"><f a=""><c path="Float"/></f></time>
		<cpuTime public="1" set="method" line="71" static="1"><f a=""><c path="Float"/></f></cpuTime>
		<executablePath public="1" set="method" line="75" static="1"><f a=""><c path="String"/></f></executablePath>
		<environment public="1" set="method" line="79" static="1"><f a=""><c path="Hash"><c path="String"/></c></f></environment>
		<get_env line="91" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></get_env>
		<put_env line="92" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></put_env>
		<_sleep line="93" static="1"><f a="">
	<c path="Float"/>
	<unknown/>
</f></_sleep>
		<set_time_locale line="94" static="1"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></set_time_locale>
		<get_cwd line="95" static="1"><f a=""><c path="String"/></f></get_cwd>
		<set_cwd line="96" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></set_cwd>
		<sys_string line="97" static="1"><f a=""><c path="String"/></f></sys_string>
		<sys_command line="98" static="1"><f a="">
	<c path="String"/>
	<c path="Int"/>
</f></sys_command>
		<sys_exit line="99" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></sys_exit>
		<sys_time line="100" static="1"><f a=""><c path="Float"/></f></sys_time>
		<sys_cpu_time line="101" static="1"><f a=""><c path="Float"/></f></sys_cpu_time>
		<sys_exe_path line="102" static="1"><f a=""><c path="String"/></f></sys_exe_path>
		<sys_env line="103" static="1"><f a=""><c path="Array"><c path="String"/></c></f></sys_env>
	</class>
	<class path="nme.text.Font" params="" file="D:\Development\Haxe\nekonme/nme/text/Font.hx">
		<load public="1" set="method" line="25" static="1"><f a="inFilename">
	<c path="String"/>
	<t path="nme.text.NativeFontData"/>
</f></load>
		<freetype_import_font line="37" static="1"><f a="::">
	<c path="String"/>
	<unknown/>
	<c path="Int"/>
	<t path="nme.text.NativeFontData"/>
</f></freetype_import_font>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<fontStyle public="1" set="null"><e path="nme.text.FontStyle"/></fontStyle>
		<fontType public="1" set="null"><e path="nme.text.FontType"/></fontType>
		<new public="1" set="method" line="17"><f a="inFilename">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.text.NativeFontData" params="" file="D:\Development\Haxe\nekonme/nme/text/Font.hx" module="nme.text.Font"><a>
	<style_name><c path="String"/></style_name>
	<num_glyphs><c path="Int"/></num_glyphs>
	<kerning><c path="Array"><t path="nme.text.NativeKerningData"/></c></kerning>
	<is_italic><e path="Bool"/></is_italic>
	<is_fixed_width><e path="Bool"/></is_fixed_width>
	<is_bold><e path="Bool"/></is_bold>
	<height><c path="Int"/></height>
	<has_kerning><e path="Bool"/></has_kerning>
	<has_glyph_names><e path="Bool"/></has_glyph_names>
	<glyphs><c path="Array"><t path="nme.text.NativeGlyphData"/></c></glyphs>
	<family_name><c path="String"/></family_name>
	<em_size><c path="Int"/></em_size>
	<descend><c path="Int"/></descend>
	<ascend><c path="Int"/></ascend>
</a></typedef>
	<typedef path="nme.text.NativeGlyphData" params="" file="D:\Development\Haxe\nekonme/nme/text/Font.hx" module="nme.text.Font"><a>
	<points><c path="Array"><c path="Int"/></c></points>
	<min_y><c path="Int"/></min_y>
	<min_x><c path="Int"/></min_x>
	<max_y><c path="Int"/></max_y>
	<max_x><c path="Int"/></max_x>
	<char_code><c path="Int"/></char_code>
	<advance><c path="Int"/></advance>
</a></typedef>
	<typedef path="nme.text.NativeKerningData" params="" file="D:\Development\Haxe\nekonme/nme/text/Font.hx" module="nme.text.Font"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
	<right_glyph><c path="Int"/></right_glyph>
	<left_glyph><c path="Int"/></left_glyph>
</a></typedef>
	<class path="nme.media.SoundChannel" params="" file="D:\Development\Haxe\nekonme/nme/media/SoundChannel.hx">
		<extends path="nme.events.EventDispatcher"/>
		<nmeIncompleteList line="18" static="1"><c path="Array"><c path="nme.media.SoundChannel"/></c></nmeIncompleteList>
		<nmeCompletePending public="1" set="method" line="60" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeCompletePending>
		<nmePollComplete public="1" set="method" line="69" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmePollComplete>
		<nme_sound_channel_is_complete line="129" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_sound_channel_is_complete>
		<nme_sound_channel_get_left line="130" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_left>
		<nme_sound_channel_get_right line="131" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_right>
		<nme_sound_channel_get_position line="132" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_position>
		<nme_sound_channel_stop line="133" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_channel_stop>
		<nme_sound_channel_create line="134" static="1"><f a=":::">
	<d/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="nme.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_create>
		<nme_sound_channel_set_transform line="135" static="1"><f a=":">
	<d/>
	<c path="nme.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_set_transform>
		<leftPeak public="1" get="nmeGetLeft" set="null"><c path="Float"/></leftPeak>
		<rightPeak public="1" get="nmeGetRight" set="null"><c path="Float"/></rightPeak>
		<position public="1" get="nmeGetPosition" set="null"><c path="Float"/></position>
		<soundTransform public="1" get="nmeGetTransform" set="nmeSetTransform"><c path="nme.media.SoundTransform"/></soundTransform>
		<nmeHandle><d/></nmeHandle>
		<nmeTransform><c path="nme.media.SoundTransform"/></nmeTransform>
		<nmeCheckComplete set="method" line="42"><f a=""><e path="Bool"/></f></nmeCheckComplete>
		<stop public="1" set="method" line="88"><f a=""><e path="Void"/></f></stop>
		<nmeGetLeft set="method" line="99"><f a=""><c path="Float"/></f></nmeGetLeft>
		<nmeGetRight set="method" line="100"><f a=""><c path="Float"/></f></nmeGetRight>
		<nmeGetPosition set="method" line="101"><f a=""><c path="Float"/></f></nmeGetPosition>
		<nmeGetTransform set="method" line="104"><f a=""><c path="nme.media.SoundTransform"/></f></nmeGetTransform>
		<nmeSetTransform set="method" line="115"><f a="inTransform">
	<c path="nme.media.SoundTransform"/>
	<c path="nme.media.SoundTransform"/>
</f></nmeSetTransform>
		<new public="1" set="method" line="24"><f a="inSoundHandle:startTime:loops:sndTransform">
	<d/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="nme.media.SoundTransform"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\Motion-Twin\haxe/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<typedef path="haxe.TypeResolver" params="" file="C:\Motion-Twin\haxe/std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<c path="Enum"><d/></c>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<c path="Class"><d/></c>
</f></resolveClass>
</a></typedef>
	<class path="haxe.Unserializer" params="" file="C:\Motion-Twin\haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="34" static="1"><t path="haxe.TypeResolver"/></DEFAULT_RESOLVER>
		<BASE64 line="36" static="1"><c path="String"/></BASE64>
		<CODES line="39" static="1"><c path="Array"><c path="Int"/></c></CODES>
		<initCodes set="method" line="41" static="1"><f a=""><c path="Array"><c path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="356" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Unserialize a single value and return it.
	</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><c path="Int"/></pos>
		<length><c path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="81"><f a="r">
	<t path="haxe.TypeResolver"/>
	<e path="Void"/>
</f></setResolver>
		<getResolver public="1" set="method" line="91"><f a=""><t path="haxe.TypeResolver"/></f></getResolver>
		<get get="inline" set="null" line="95"><f a="p">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<readDigits set="method" line="99"><f a=""><c path="Int"/></f></readDigits>
		<unserializeObject set="method" line="124"><f a="o">
	<a/>
	<e path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="139"><f a="edecl:tag">
	<c path="Enum"><d/></c>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="160"><f a=""><d/></f></unserialize>
		<new public="1" set="method" line="64"><f a="buf">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.FocusEvent" params="" file="D:\Development\Haxe\nekonme/nme/events/FocusEvent.hx">
		<extends path="nme.events.Event"/>
		<FOCUS_IN public="1" line="11" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT public="1" line="12" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" line="13" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" line="14" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<keyCode public="1" set="null"><c path="Int"/></keyCode>
		<relatedObject public="1" set="null"><c path="nme.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1" set="null"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="30" override="1"><f a=""><c path="nme.events.Event"/></f></clone>
		<toString public="1" set="method" line="36" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="21"><f a="inType:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode:?direction">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="nme.display.InteractiveObject"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.filters.BlurFilter" params="" file="D:\Development\Haxe\nekonme/nme/filters/BlurFilter.hx">
		<extends path="nme.filters.BitmapFilter"/>
		<blurX><c path="Float"/></blurX>
		<blurY><c path="Float"/></blurY>
		<quality><c path="Int"/></quality>
		<clone public="1" set="method" line="22" override="1"><f a=""><c path="nme.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method" line="13"><f a="?inBlurX:?inBlurY:?inQuality">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.text.TextFormat" params="" file="D:\Development\Haxe\nekonme/nme/text/TextFormat.hx">
		<align public="1"><t path="Null"><c path="String"/></t></align>
		<blockIndent public="1"><d/></blockIndent>
		<bold public="1"><d/></bold>
		<bullet public="1"><d/></bullet>
		<color public="1"><d/></color>
		<display public="1"><t path="Null"><c path="String"/></t></display>
		<font public="1"><t path="Null"><c path="String"/></t></font>
		<indent public="1"><d/></indent>
		<italic public="1"><d/></italic>
		<kerning public="1"><d/></kerning>
		<leading public="1"><d/></leading>
		<leftMargin public="1"><d/></leftMargin>
		<letterSpacing public="1"><d/></letterSpacing>
		<rightMargin public="1"><d/></rightMargin>
		<size public="1"><d/></size>
		<tabStops public="1"><c path="Array"><c path="Int"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><d/></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method" line="29"><f a="?in_font:?in_size:?in_color:?in_bold:?in_italic:?in_underline:?in_url:?in_target:?in_align:?in_leftMargin:?in_rightMargin:?in_indent:?in_leading">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.PixelSnapping" params="" file="D:\Development\Haxe\nekonme/nme/display/PixelSnapping.hx">
		<NEVER/>
		<AUTO/>
		<ALWAYS/>
	</enum>
	<class path="nme.filters.GlowFilter" params="" file="D:\Development\Haxe\nekonme/nme/filters/GlowFilter.hx">
		<extends path="nme.filters.DropShadowFilter"/>
		<new public="1" set="method" line="8"><f a="?in_color:?in_alpha:?in_blurX:?in_blurY:?in_strength:?in_quality:?in_inner:?in_knockout">
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.filesystem.File" params="" file="D:\Development\Haxe\nekonme/nme/filesystem/File.hx">
		<APP get="inline" set="null" line="11" static="1"><c path="Int"/></APP>
		<STORAGE get="inline" set="null" line="12" static="1"><c path="Int"/></STORAGE>
		<DESKTOP get="inline" set="null" line="13" static="1"><c path="Int"/></DESKTOP>
		<DOCS get="inline" set="null" line="14" static="1"><c path="Int"/></DOCS>
		<USER get="inline" set="null" line="15" static="1"><c path="Int"/></USER>
		<applicationDirectory public="1" get="nmeGetAppDir" set="null" static="1"><c path="nme.filesystem.File"/></applicationDirectory>
		<applicationStorageDirectory public="1" get="nmeGetStorageDir" set="null" static="1"><c path="nme.filesystem.File"/></applicationStorageDirectory>
		<desktopDirectory public="1" get="nmeGetDesktopDir" set="null" static="1"><c path="nme.filesystem.File"/></desktopDirectory>
		<documentsDirectory public="1" get="nmeGetDocsDir" set="null" static="1"><c path="nme.filesystem.File"/></documentsDirectory>
		<userDirectory public="1" get="nmeGetUserDir" set="null" static="1"><c path="nme.filesystem.File"/></userDirectory>
		<nme_filesystem_get_special_dir line="35" static="1"><f a="">
	<c path="Int"/>
	<c path="String"/>
</f></nme_filesystem_get_special_dir>
		<nmeGetAppDir set="method" line="48" static="1"><f a=""><c path="nme.filesystem.File"/></f></nmeGetAppDir>
		<nmeGetStorageDir set="method" line="52" static="1"><f a=""><c path="nme.filesystem.File"/></f></nmeGetStorageDir>
		<nmeGetDesktopDir set="method" line="56" static="1"><f a=""><c path="nme.filesystem.File"/></f></nmeGetDesktopDir>
		<nmeGetDocsDir set="method" line="60" static="1"><f a=""><c path="nme.filesystem.File"/></f></nmeGetDocsDir>
		<nmeGetUserDir set="method" line="64" static="1"><f a=""><c path="nme.filesystem.File"/></f></nmeGetUserDir>
		<nativePath public="1" set="nmeSetNativePath"><c path="String"/></nativePath>
		<url public="1" set="nmeSetURL"><c path="String"/></url>
		<nmeSetNativePath set="method" line="70"><f a="inPath">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetNativePath>
		<nmeSetURL set="method" line="77"><f a="inPath">
	<c path="String"/>
	<c path="String"/>
</f></nmeSetURL>
		<new public="1" set="method" line="28"><f a="?path">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.utils.ByteArray" params="" file="D:\Development\Haxe\nekonme/nme/utils/ByteArray.hx">
		<extends path="haxe.io.Bytes"/>
		<implements path="nme.utils.IDataInput"/>
		<bytes static="1"><d/></bytes>
		<factory static="1"><d/></factory>
		<resize static="1"><d/></resize>
		<slen static="1"><d/></slen>
		<fromBytes public="1" set="method" line="156" static="1"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<c path="nme.utils.ByteArray"/>
</f></fromBytes>
		<readFile public="1" set="method" line="240" static="1"><f a="inString">
	<c path="String"/>
	<c path="nme.utils.ByteArray"/>
</f></readFile>
		<_double_bytes line="511" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_double_bytes>
		<_double_of_bytes line="512" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_double_of_bytes>
		<_float_bytes line="513" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_float_bytes>
		<_float_of_bytes line="514" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_float_of_bytes>
		<nme_byte_array_overwrite_file line="517" static="1"><f a=":">
	<c path="String"/>
	<c path="nme.utils.ByteArray"/>
	<unknown/>
</f></nme_byte_array_overwrite_file>
		<nme_byte_array_read_file line="518" static="1"><f a="">
	<c path="String"/>
	<c path="nme.utils.ByteArray"/>
</f></nme_byte_array_read_file>
		<bigEndian public="1"><e path="Bool"/></bigEndian>
		<bytesAvailable public="1" get="nmeGetBytesAvailable" set="null"><c path="Int"/></bytesAvailable>
		<endian public="1" get="nmeGetEndian" set="nmeSetEndian"><c path="String"/></endian>
		<position public="1"><c path="Int"/></position>
		<__get public="1" get="inline" set="null" line="64"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></__get>
		<__set public="1" get="inline" set="null" line="94"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></__set>
		<asString public="1" set="method" line="105"><f a=""><c path="String"/></f></asString>
		<checkData public="1" set="method" line="112"><f a="inLength">
	<c path="Int"/>
	<e path="Void"/>
</f></checkData>
		<compress public="1" set="method" line="119"><f a="?algorithm">
	<c path="String"/>
	<e path="Void"/>
</f></compress>
		<ensureElem set="method" line="136"><f a="inSize:inUpdateLenght">
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></ensureElem>
		<push get="inline" set="null" line="168"><f a="inByte">
	<c path="Int"/>
	<e path="Void"/>
</f></push>
		<push_uncheck get="inline" set="null" line="179"><f a="inByte">
	<c path="Int"/>
	<e path="Void"/>
</f></push_uncheck>
		<readBoolean public="1" get="inline" set="null" line="189"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" get="inline" set="null" line="195"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="201"><f a="outData:?inOffset:?inLen">
	<c path="nme.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method" line="223"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method" line="247"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method" line="263"><f a=""><c path="Int"/></f></readInt>
		<readShort public="1" set="method" line="273"><f a=""><c path="Int"/></f></readShort>
		<readUnsignedByte public="1" get="inline" set="null" line="282"><f a=""><c path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method" line="288"><f a=""><c path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method" line="298"><f a=""><c path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method" line="306"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method" line="313"><f a="inLen">
	<c path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<setLength public="1" set="method" line="330"><f a="inLength">
	<c path="Int"/>
	<e path="Void"/>
</f></setLength>
		<ThrowEOFi set="method" line="338"><f a=""><c path="Int"/></f></ThrowEOFi>
		<uncompress public="1" set="method" line="345"><f a="?algorithm">
	<c path="String"/>
	<e path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method" line="363"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method" line="369"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="375"><f a="bytes:?inOffset:?inLength">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method" line="386"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFile public="1" set="method" line="398"><f a="inString">
	<c path="String"/>
	<e path="Void"/>
</f></writeFile>
		<writeFloat public="1" set="method" line="405"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method" line="416"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeShort public="1" set="method" line="440"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUnsignedInt public="1" set="method" line="456"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<writeUTF public="1" set="method" line="462"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method" line="474"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<nmeGetBytesAvailable public="1" set="method" line="493">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetBytesAvailable>
		<nmeGetEndian public="1" set="method" line="498">
			<f a=""><c path="String"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeGetEndian>
		<nmeSetEndian public="1" set="method" line="503">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeSetEndian>
		<new public="1" set="method" line="44"><f a="?inSize">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.InterpolationMethod" params="" file="D:\Development\Haxe\nekonme/nme/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
	</enum>
	<class path="nme.errors.EOFError" params="" file="D:\Development\Haxe\nekonme/nme/errors/EOFError.hx">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="nme.display.BitmapDataChannel" params="" file="D:\Development\Haxe\nekonme/nme/display/BitmapDataChannel.hx">
		<ALPHA public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></ALPHA>
		<BLUE public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></BLUE>
		<GREEN public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></GREEN>
		<RED public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></RED>
	</class>
	<class path="nme.external.ExternalInterface" params="" file="D:\Development\Haxe\nekonme/nme/external/ExternalInterface.hx">
		<available public="1" get="nmeIsAvailable" set="null" static="1"><e path="Bool"/></available>
		<marshallExceptions public="1" static="1"><e path="Bool"/></marshallExceptions>
		<objectID public="1" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" line="16" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<e path="Void"/>
</f></addCallback>
		<call public="1" set="method" line="22" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
		<nmeIsAvailable set="method" line="60" static="1"><f a=""><e path="Bool"/></f></nmeIsAvailable>
		<nme_external_interface_add_callback line="71" static="1"><f a=":">
	<c path="String"/>
	<d/>
	<unknown/>
</f></nme_external_interface_add_callback>
		<nme_external_interface_available line="72" static="1"><f a=""><e path="Bool"/></f></nme_external_interface_available>
		<nme_external_interface_call line="73" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_external_interface_call>
	</class>
	<typedef path="nme.format.swf.MorphRenderFunc" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphShape.hx" module="nme.format.swf.MorphShape"><f a=":">
	<c path="nme.display.Graphics"/>
	<c path="Float"/>
	<e path="Void"/>
</f></typedef>
	<typedef path="nme.format.swf.MorphRenderFuncList" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphShape.hx" module="nme.format.swf.MorphShape"><c path="Array"><t path="nme.format.swf.MorphRenderFunc"/></c></typedef>
	<enum path="nme.format.swf.MorphEdge" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphShape.hx" module="nme.format.swf.MorphShape">
		<meStyle a="func"><f a=":">
	<c path="nme.display.Graphics"/>
	<c path="Float"/>
	<e path="Void"/>
</f></meStyle>
		<meMove a="x:y">
			<c path="Float"/>
			<c path="Float"/>
		</meMove>
		<meLine a="cx:cy:x:y">
			<c path="Float"/>
			<c path="Float"/>
			<c path="Float"/>
			<c path="Float"/>
		</meLine>
		<meCurve a="cx:cy:x:y">
			<c path="Float"/>
			<c path="Float"/>
			<c path="Float"/>
			<c path="Float"/>
		</meCurve>
	</enum>
	<typedef path="nme.format.swf.MorphEdgeList" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphShape.hx" module="nme.format.swf.MorphShape"><c path="List"><e path="nme.format.swf.MorphEdge"/></c></typedef>
	<class path="nme.format.swf.MorphShape" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/MorphShape.hx">
		<ftSolid line="40" static="1"><c path="Int"/></ftSolid>
		<ftLinear line="41" static="1"><c path="Int"/></ftLinear>
		<ftRadial line="42" static="1"><c path="Int"/></ftRadial>
		<ftRadialF line="43" static="1"><c path="Int"/></ftRadialF>
		<ftBitmapRepeat line="44" static="1"><c path="Int"/></ftBitmapRepeat>
		<ftBitmapClipped line="45" static="1"><c path="Int"/></ftBitmapClipped>
		<ftBitmapRepeatR line="46" static="1"><c path="Int"/></ftBitmapRepeatR>
		<ftBitmapClippedR line="47" static="1"><c path="Int"/></ftBitmapClippedR>
		<InterpMatrix set="method" line="400" static="1"><f a="inM0:inM1:f">
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.Matrix"/>
	<c path="Float"/>
	<c path="nme.geom.Matrix"/>
</f></InterpMatrix>
		<InterpColour set="method" line="412" static="1"><f a="inC0:inC1:f">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Int"/>
</f></InterpColour>
		<mBounds0><c path="nme.geom.Rectangle"/></mBounds0>
		<mBounds1><c path="nme.geom.Rectangle"/></mBounds1>
		<mEdgeBounds0><c path="nme.geom.Rectangle"/></mEdgeBounds0>
		<mEdgeBounds1><c path="nme.geom.Rectangle"/></mEdgeBounds1>
		<mHasNonScaled><e path="Bool"/></mHasNonScaled>
		<mHasScaled><e path="Bool"/></mHasScaled>
		<mCommands><t path="nme.format.swf.MorphRenderFuncList"/></mCommands>
		<mSWF><c path="nme.format.SWF"/></mSWF>
		<mWaitingLoader><e path="Bool"/></mWaitingLoader>
		<Render public="1" set="method" line="392"><f a="inGraphics:f">
	<c path="nme.display.Graphics"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></Render>
		<ReadFillStyles set="method" line="422"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<t path="nme.format.swf.MorphRenderFuncList"/>
</f></ReadFillStyles>
		<ReadLineStyles set="method" line="555"><f a="inStream:inVersion">
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<t path="nme.format.swf.MorphRenderFuncList"/>
</f></ReadLineStyles>
		<new public="1" set="method" line="50"><f a="inSWF:inStream:inVersion">
	<c path="nme.format.SWF"/>
	<c path="nme.format.swf.SWFStream"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.GraphicsSolidFill" params="" file="D:\Development\Haxe\nekonme/nme/display/GraphicsSolidFill.hx">
		<extends path="nme.display.IGraphicsData"/>
		<nme_graphics_solid_fill_create line="17" static="1"><f a=":">
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_graphics_solid_fill_create>
		<new public="1" set="method" line="11"><f a="?color:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="flash.utils.ByteArray" params="" file="D:\Development\Haxe\nekonme/nme/utils/ByteArray.hx"><c path="nme.utils.ByteArray"/></typedef>
	<class path="nme.geom.Transform" params="" file="D:\Development\Haxe\nekonme/nme/geom/Transform.hx">
		<colorTransform public="1" get="nmeGetColorTransform" set="nmeSetColorTransform"><c path="nme.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" get="nmeGetConcatenatedColorTransform" set="null"><c path="nme.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" get="nmeGetConcatenatedMatrix" set="null"><c path="nme.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1" get="nmeGetMatrix" set="nmeSetMatrix"><c path="nme.geom.Matrix"/></matrix>
		<pixelBounds public="1" get="nmeGetPixelBounds" set="null"><c path="nme.geom.Rectangle"/></pixelBounds>
		<nmeObj><c path="nme.display.DisplayObject"/></nmeObj>
		<nmeGetColorTransform set="method" line="31"><f a=""><c path="nme.geom.ColorTransform"/></f></nmeGetColorTransform>
		<nmeSetColorTransform set="method" line="32"><f a="inTrans">
	<c path="nme.geom.ColorTransform"/>
	<c path="nme.geom.ColorTransform"/>
</f></nmeSetColorTransform>
		<nmeGetConcatenatedColorTransform set="method" line="33"><f a=""><c path="nme.geom.ColorTransform"/></f></nmeGetConcatenatedColorTransform>
		<nmeGetConcatenatedMatrix set="method" line="34"><f a=""><c path="nme.geom.Matrix"/></f></nmeGetConcatenatedMatrix>
		<nmeGetMatrix set="method" line="35"><f a=""><c path="nme.geom.Matrix"/></f></nmeGetMatrix>
		<nmeSetMatrix set="method" line="36"><f a="inMatrix">
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.Matrix"/>
</f></nmeSetMatrix>
		<nmeGetPixelBounds set="method" line="37"><f a=""><c path="nme.geom.Rectangle"/></f></nmeGetPixelBounds>
		<new public="1" set="method" line="20"><f a="inParent">
	<c path="nme.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.CapsStyle" params="" file="D:\Development\Haxe\nekonme/nme/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
	</enum>
	<class path="nme.ui.Keyboard" params="" file="D:\Development\Haxe\nekonme/nme/ui/Keyboard.hx">
		<A public="1" line="8" static="1"><c path="Int"/></A>
		<B public="1" line="9" static="1"><c path="Int"/></B>
		<C public="1" line="10" static="1"><c path="Int"/></C>
		<D public="1" line="11" static="1"><c path="Int"/></D>
		<E public="1" line="12" static="1"><c path="Int"/></E>
		<F public="1" line="13" static="1"><c path="Int"/></F>
		<G public="1" line="14" static="1"><c path="Int"/></G>
		<H public="1" line="15" static="1"><c path="Int"/></H>
		<I public="1" line="16" static="1"><c path="Int"/></I>
		<J public="1" line="17" static="1"><c path="Int"/></J>
		<K public="1" line="18" static="1"><c path="Int"/></K>
		<L public="1" line="19" static="1"><c path="Int"/></L>
		<M public="1" line="20" static="1"><c path="Int"/></M>
		<N public="1" line="21" static="1"><c path="Int"/></N>
		<O public="1" line="22" static="1"><c path="Int"/></O>
		<P public="1" line="23" static="1"><c path="Int"/></P>
		<Q public="1" line="24" static="1"><c path="Int"/></Q>
		<R public="1" line="25" static="1"><c path="Int"/></R>
		<S public="1" line="26" static="1"><c path="Int"/></S>
		<T public="1" line="27" static="1"><c path="Int"/></T>
		<U public="1" line="28" static="1"><c path="Int"/></U>
		<V public="1" line="29" static="1"><c path="Int"/></V>
		<W public="1" line="30" static="1"><c path="Int"/></W>
		<X public="1" line="31" static="1"><c path="Int"/></X>
		<Y public="1" line="32" static="1"><c path="Int"/></Y>
		<Z public="1" line="33" static="1"><c path="Int"/></Z>
		<ALTERNATE public="1" line="35" static="1"><c path="Int"/></ALTERNATE>
		<BACKQUOTE public="1" line="36" static="1"><c path="Int"/></BACKQUOTE>
		<BACKSLASH public="1" line="37" static="1"><c path="Int"/></BACKSLASH>
		<BACKSPACE public="1" line="38" static="1"><c path="Int"/></BACKSPACE>
		<CAPS_LOCK public="1" line="39" static="1"><c path="Int"/></CAPS_LOCK>
		<COMMA public="1" line="40" static="1"><c path="Int"/></COMMA>
		<COMMAND public="1" line="41" static="1"><c path="Int"/></COMMAND>
		<CONTROL public="1" line="42" static="1"><c path="Int"/></CONTROL>
		<DELETE public="1" line="43" static="1"><c path="Int"/></DELETE>
		<DOWN public="1" line="44" static="1"><c path="Int"/></DOWN>
		<END public="1" line="45" static="1"><c path="Int"/></END>
		<ENTER public="1" line="46" static="1"><c path="Int"/></ENTER>
		<EQUAL public="1" line="47" static="1"><c path="Int"/></EQUAL>
		<ESCAPE public="1" line="48" static="1"><c path="Int"/></ESCAPE>
		<F1 public="1" line="49" static="1"><c path="Int"/></F1>
		<F2 public="1" line="50" static="1"><c path="Int"/></F2>
		<F3 public="1" line="51" static="1"><c path="Int"/></F3>
		<F4 public="1" line="52" static="1"><c path="Int"/></F4>
		<F5 public="1" line="53" static="1"><c path="Int"/></F5>
		<F6 public="1" line="54" static="1"><c path="Int"/></F6>
		<F7 public="1" line="55" static="1"><c path="Int"/></F7>
		<F8 public="1" line="56" static="1"><c path="Int"/></F8>
		<F9 public="1" line="57" static="1"><c path="Int"/></F9>
		<F10 public="1" line="58" static="1"><c path="Int"/></F10>
		<F11 public="1" line="59" static="1"><c path="Int"/></F11>
		<F12 public="1" line="60" static="1"><c path="Int"/></F12>
		<F13 public="1" line="61" static="1"><c path="Int"/></F13>
		<F14 public="1" line="62" static="1"><c path="Int"/></F14>
		<F15 public="1" line="63" static="1"><c path="Int"/></F15>
		<HOME public="1" line="64" static="1"><c path="Int"/></HOME>
		<INSERT public="1" line="65" static="1"><c path="Int"/></INSERT>
		<LEFT public="1" line="66" static="1"><c path="Int"/></LEFT>
		<LEFTBRACKET public="1" line="67" static="1"><c path="Int"/></LEFTBRACKET>
		<MINUS public="1" line="68" static="1"><c path="Int"/></MINUS>
		<NUMBER_0 public="1" line="69" static="1"><c path="Int"/></NUMBER_0>
		<NUMBER_1 public="1" line="70" static="1"><c path="Int"/></NUMBER_1>
		<NUMBER_2 public="1" line="71" static="1"><c path="Int"/></NUMBER_2>
		<NUMBER_3 public="1" line="72" static="1"><c path="Int"/></NUMBER_3>
		<NUMBER_4 public="1" line="73" static="1"><c path="Int"/></NUMBER_4>
		<NUMBER_5 public="1" line="74" static="1"><c path="Int"/></NUMBER_5>
		<NUMBER_6 public="1" line="75" static="1"><c path="Int"/></NUMBER_6>
		<NUMBER_7 public="1" line="76" static="1"><c path="Int"/></NUMBER_7>
		<NUMBER_8 public="1" line="77" static="1"><c path="Int"/></NUMBER_8>
		<NUMBER_9 public="1" line="78" static="1"><c path="Int"/></NUMBER_9>
		<NUMPAD public="1" line="79" static="1"><c path="Int"/></NUMPAD>
		<NUMPAD_0 public="1" line="80" static="1"><c path="Int"/></NUMPAD_0>
		<NUMPAD_1 public="1" line="81" static="1"><c path="Int"/></NUMPAD_1>
		<NUMPAD_2 public="1" line="82" static="1"><c path="Int"/></NUMPAD_2>
		<NUMPAD_3 public="1" line="83" static="1"><c path="Int"/></NUMPAD_3>
		<NUMPAD_4 public="1" line="84" static="1"><c path="Int"/></NUMPAD_4>
		<NUMPAD_5 public="1" line="85" static="1"><c path="Int"/></NUMPAD_5>
		<NUMPAD_6 public="1" line="86" static="1"><c path="Int"/></NUMPAD_6>
		<NUMPAD_7 public="1" line="87" static="1"><c path="Int"/></NUMPAD_7>
		<NUMPAD_8 public="1" line="88" static="1"><c path="Int"/></NUMPAD_8>
		<NUMPAD_9 public="1" line="89" static="1"><c path="Int"/></NUMPAD_9>
		<NUMPAD_ADD public="1" line="90" static="1"><c path="Int"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" line="91" static="1"><c path="Int"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" line="92" static="1"><c path="Int"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" line="93" static="1"><c path="Int"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" line="94" static="1"><c path="Int"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" line="95" static="1"><c path="Int"/></NUMPAD_SUBTRACT>
		<PAGE_DOWN public="1" line="96" static="1"><c path="Int"/></PAGE_DOWN>
		<PAGE_UP public="1" line="97" static="1"><c path="Int"/></PAGE_UP>
		<PERIOD public="1" line="98" static="1"><c path="Int"/></PERIOD>
		<QUOTE public="1" line="99" static="1"><c path="Int"/></QUOTE>
		<RIGHT public="1" line="100" static="1"><c path="Int"/></RIGHT>
		<RIGHTBRACKET public="1" line="101" static="1"><c path="Int"/></RIGHTBRACKET>
		<SEMICOLON public="1" line="102" static="1"><c path="Int"/></SEMICOLON>
		<SHIFT public="1" line="103" static="1"><c path="Int"/></SHIFT>
		<SLASH public="1" line="104" static="1"><c path="Int"/></SLASH>
		<SPACE public="1" line="105" static="1"><c path="Int"/></SPACE>
		<TAB public="1" line="106" static="1"><c path="Int"/></TAB>
		<UP public="1" line="107" static="1"><c path="Int"/></UP>
	</class>
	<class path="nme.events.Listener" params="" file="D:\Development\Haxe\nekonme/nme/events/EventDispatcher.hx" module="nme.events.EventDispatcher">
		<sIDs line="167" static="1"><c path="Int"/></sIDs>
		<mID public="1"><c path="Int"/></mID>
		<mListner public="1"><t path="nme.events.Function"/></mListner>
		<mPriority public="1"><c path="Int"/></mPriority>
		<mUseCapture public="1"><e path="Bool"/></mUseCapture>
		<dispatchEvent public="1" set="method" line="179"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Void"/>
</f></dispatchEvent>
		<Is public="1" set="method" line="185"><f a="inListener:inCapture">
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></Is>
		<new public="1" set="method" line="170"><f a="inListener:inUseCapture:inPriority">
	<t path="nme.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.events.ListenerList" params="" file="D:\Development\Haxe\nekonme/nme/events/EventDispatcher.hx" module="nme.events.EventDispatcher"><c path="Array"><c path="nme.utils.WeakRef"><c path="nme.events.Listener"/></c></c></typedef>
	<typedef path="nme.events.EventMap" params="" file="D:\Development\Haxe\nekonme/nme/events/EventDispatcher.hx" module="nme.events.EventDispatcher"><c path="Hash"><t path="nme.events.ListenerList"/></c></typedef>
	<enum path="nme.format.swf.Character" params="" file="D:\Development\Haxe\nekonme/nme/format/swf/Character.hx">
		<charStaticText a="inText"><c path="nme.format.swf.StaticText"/></charStaticText>
		<charSprite a="inSprite"><c path="nme.format.swf.Sprite"/></charSprite>
		<charShape a="inShape"><c path="nme.format.swf.Shape"/></charShape>
		<charMorphShape a="inMorphShape"><c path="nme.format.swf.MorphShape"/></charMorphShape>
		<charFont a="inFont"><c path="nme.format.swf.Font"/></charFont>
		<charEditText a="inText"><c path="nme.format.swf.EditText"/></charEditText>
		<charBitmap a="inBitmap"><c path="nme.format.swf.Bitmap"/></charBitmap>
	</enum>
	<class path="nme.display.BitmapData" params="" file="D:\Development\Haxe\nekonme/nme/display/BitmapData.hx">
		<implements path="nme.display.IBitmapDrawable"/>
		<CLEAR public="1" get="inline" set="null" line="23" static="1"><t path="nme.display.BitmapInt32"/></CLEAR>
		<BLACK public="1" get="inline" set="null" line="24" static="1"><t path="nme.display.BitmapInt32"/></BLACK>
		<WHITE public="1" get="inline" set="null" line="25" static="1"><t path="nme.display.BitmapInt32"/></WHITE>
		<RED public="1" get="inline" set="null" line="26" static="1"><t path="nme.display.BitmapInt32"/></RED>
		<GREEN public="1" get="inline" set="null" line="27" static="1"><t path="nme.display.BitmapInt32"/></GREEN>
		<BLUE public="1" get="inline" set="null" line="28" static="1"><t path="nme.display.BitmapInt32"/></BLUE>
		<PNG public="1" get="inline" set="null" line="29" static="1"><c path="String"/></PNG>
		<JPG public="1" get="inline" set="null" line="30" static="1"><c path="String"/></JPG>
		<TRANSPARENT public="1" line="32" static="1"><c path="Int"/></TRANSPARENT>
		<HARDWARE public="1" line="33" static="1"><c path="Int"/></HARDWARE>
		<FORMAT_8888 public="1" line="34" static="1"><c path="Int"/></FORMAT_8888>
		<FORMAT_4444_PADDED public="1" line="35" static="1"><c path="Int"/></FORMAT_4444_PADDED>
		<FORMAT_4444 public="1" line="36" static="1"><c path="Int"/></FORMAT_4444>
		<createColor public="1" get="inline" set="null" line="172" static="1"><f a="inRGB:?inAlpha">
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
</f></createColor>
		<extractAlpha public="1" get="inline" set="null" line="220" static="1"><f a="v">
	<t path="nme.display.BitmapInt32"/>
	<c path="Int"/>
</f></extractAlpha>
		<extractColor public="1" get="inline" set="null" line="230" static="1"><f a="v">
	<t path="nme.display.BitmapInt32"/>
	<c path="Int"/>
</f></extractColor>
		<load public="1" set="method" line="326" static="1">
			<f a="inFilename:?format">
				<c path="String"/>
				<c path="Int"/>
				<c path="nme.display.BitmapData"/>
			</f>
			<haxe_doc>
	* Load from a file path
	*
	* @param inFilename Full or relative path to image file
	* @return New BitmapData instance representing file
	</haxe_doc>
		</load>
		<loadFromBytes public="1" set="method" line="342" static="1">
			<f a="inBytes:?inRawAlpha">
				<c path="nme.utils.ByteArray"/>
				<c path="nme.utils.ByteArray"/>
				<c path="nme.display.BitmapData"/>
			</f>
			<haxe_doc><![CDATA[
	* Create BitmapData from a compressed image stream.
	* PNG & JPG supported on all platforms.
	*
	* @param inBytes - A buffer of compressed image data
	* @param inAlpha - optional alpha values to go with image RGB values - there should
	*                   be width*height values.
	]]></haxe_doc>
		</loadFromBytes>
		<loadFromHaxeBytes public="1" set="method" line="358" static="1">
			<f a="inBytes:?inRawAlpha">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="nme.display.BitmapData"/>
			</f>
			<haxe_doc><![CDATA[
	* Create BitmapData from a compressed image stream.
	* PNG & JPG supported on all platforms.
	*
	* @param inBytes - A buffer of compressed image data
	* @param inAlpha - optional alpha values to go with image RGB values - there should
	*                   be width*height values.
	]]></haxe_doc>
		</loadFromHaxeBytes>
		<nme_bitmap_data_create line="457" static="1"><f a="::::">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_create>
		<nme_bitmap_data_load line="458" static="1"><f a=":">
	<c path="String"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_load>
		<nme_bitmap_data_from_bytes line="459" static="1"><f a=":">
	<c path="nme.utils.ByteArray"/>
	<c path="nme.utils.ByteArray"/>
	<unknown/>
</f></nme_bitmap_data_from_bytes>
		<nme_bitmap_data_clear line="460" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_clear>
		<nme_bitmap_data_clone line="461" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_clone>
		<nme_bitmap_data_apply_filter line="462" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Point"/>
	<c path="nme.filters.BitmapFilter"/>
	<unknown/>
</f></nme_bitmap_data_apply_filter>
		<nme_bitmap_data_color_transform line="463" static="1"><f a="::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.ColorTransform"/>
	<unknown/>
</f></nme_bitmap_data_color_transform>
		<nme_bitmap_data_copy line="464" static="1"><f a="::::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<d/>
	<c path="nme.geom.Point"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_bitmap_data_copy>
		<nme_bitmap_data_copy_channel line="465" static="1"><f a=":::::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<d/>
	<c path="nme.geom.Point"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_copy_channel>
		<nme_bitmap_data_fill line="466" static="1"><f a=":::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_fill>
		<nme_bitmap_data_get_pixels line="467" static="1"><f a=":">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="nme.utils.ByteArray"/>
</f></nme_bitmap_data_get_pixels>
		<nme_bitmap_data_get_pixel line="468" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></nme_bitmap_data_get_pixel>
		<nme_bitmap_data_get_pixel32 line="469" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
</f></nme_bitmap_data_get_pixel32>
		<nme_bitmap_data_get_pixel_rgba line="470" static="1"><unknown/></nme_bitmap_data_get_pixel_rgba>
		<nme_bitmap_data_get_array line="472" static="1"><f a="::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_get_array>
		<nme_bitmap_data_get_color_bounds_rect line="474" static="1"><f a="::::">
	<d/>
	<t path="nme.display.BitmapInt32"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Bool"/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_get_color_bounds_rect>
		<nme_bitmap_data_scroll line="475" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_scroll>
		<nme_bitmap_data_set_pixel line="476" static="1"><f a=":::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel>
		<nme_bitmap_data_set_pixel32 line="477" static="1"><f a=":::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel32>
		<nme_bitmap_data_set_pixel_rgba line="478" static="1"><unknown/></nme_bitmap_data_set_pixel_rgba>
		<nme_bitmap_data_set_bytes line="479" static="1"><f a=":::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="nme.utils.ByteArray"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_bytes>
		<nme_bitmap_data_set_array line="481" static="1"><f a="::">
	<d/>
	<c path="nme.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_set_array>
		<nme_bitmap_data_create_hardware_surface line="482" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_create_hardware_surface>
		<nme_bitmap_data_destroy_hardware_surface line="483" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_destroy_hardware_surface>
		<nme_bitmap_data_generate_filter_rect line="485" static="1"><f a="::">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.filters.BitmapFilter"/>
	<c path="nme.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_generate_filter_rect>
		<nme_render_surface_to_surface line="486" static="1"><f a="::::::">
	<d/>
	<d/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<c path="String"/>
	<c path="nme.geom.Rectangle"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_render_surface_to_surface>
		<nme_bitmap_data_height line="487" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_bitmap_data_height>
		<nme_bitmap_data_width line="488" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_bitmap_data_width>
		<nme_bitmap_data_get_transparent line="489" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_bitmap_data_get_transparent>
		<nme_bitmap_data_set_flags line="490" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_flags>
		<nme_bitmap_data_encode line="491" static="1"><f a="::">
	<d/>
	<c path="String"/>
	<c path="Float"/>
	<c path="nme.utils.ByteArray"/>
</f></nme_bitmap_data_encode>
		<nme_bitmap_data_dump_bits line="492" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_dump_bits>
		<height public="1" get="nmeGetHeight" set="null">
			<c path="Int"/>
			<haxe_doc>
	 * Returns the height in pixels of the bitmap data
	 </haxe_doc>
		</height>
		<rect public="1" get="nmeGetRect" set="null">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc>
	 * Returns a rectangle with the dimensions of the bitmap data
	 </haxe_doc>
		</rect>
		<transparent public="1" get="nmeGetTransparent" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Returns whether the bitmap data includes transparency
	 </haxe_doc>
		</transparent>
		<width public="1" get="nmeGetWidth" set="null">
			<c path="Int"/>
			<haxe_doc>
	 * Returns the width in pixels of the bitmap data
	 </haxe_doc>
		</width>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<applyFilter public="1" set="method" line="104">
			<f a="sourceBitmapData:sourceRect:destPoint:filter">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="nme.filters.BitmapFilter"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draws the result of a bitmap data object, plus a bitmap filter, to this bitmap data
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		A rectangle which defines the area to use from the source bitmap data object
	 * @param	destPoint		The location to place the result in this bitmap data object
	 * @param	filter		The bitmap filter to use
	 </haxe_doc>
		</applyFilter>
		<clear public="1" set="method" line="114">
			<f a="color">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Fills this bitmap data object using a solid color
	 * @param	color		The color to fill
	 </haxe_doc>
		</clear>
		<clone public="1" set="method" line="124">
			<f a=""><c path="nme.display.BitmapData"/></f>
			<haxe_doc>
	 * Duplicates the current instance as a new bitmap data object
	 * @return		A new duplicate bitmap data object
	 </haxe_doc>
		</clone>
		<colorTransform public="1" set="method" line="137">
			<f a="rect:colorTransform">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Applies a color transform to a portion of this bitmap data object
	 * @param	rect		A rectangular area to transform
	 * @param	colorTransform		The color transform to use
	 </haxe_doc>
		</colorTransform>
		<copyChannel public="1" set="method" line="151">
			<f a="sourceBitmapData:sourceRect:destPoint:inSourceChannel:inDestChannel">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Copies a channel (red, green, blue or alpha) into another channel or object
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		The source rectangle to pull from
	 * @param	destPoint		The destination point on this bitmap data object
	 * @param	inSourceChannel		The source channel to copy
	 * @param	inDestChannel		The destination channel to paste into
	 </haxe_doc>
		</copyChannel>
		<copyPixels public="1" set="method" line="166">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Point"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Copies pixels from a bitmap data object into this instance
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		The source rectangle to pull from
	 * @param	destPoint		The destination point on this bitmap data object
	 * @param	alphaBitmapData		(Optional) A source bitmap data object to use for alpha information
	 * @param	alphaPoint		(Optional) A source point to use when copying from the alpha bitmap data object
	 * @param	mergeAlpha		(Optional) Whether copied pixels should have their alpha merged with pixels at the destination
	 </haxe_doc>
		</copyPixels>
		<createHardwareSurface public="1" set="method" line="183"><f a=""><e path="Void"/></f></createHardwareSurface>
		<destroyHardwareSurface public="1" set="method" line="189"><f a=""><e path="Void"/></f></destroyHardwareSurface>
		<dispose public="1" set="method" line="196"><f a=""><e path="Void"/></f></dispose>
		<draw public="1" set="method" line="202"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="nme.display.IBitmapDrawable"/>
	<c path="nme.geom.Matrix"/>
	<c path="nme.geom.ColorTransform"/>
	<c path="String"/>
	<c path="nme.geom.Rectangle"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<dumpBits public="1" set="method" line="208"><f a=""><e path="Void"/></f></dumpBits>
		<encode public="1" set="method" line="214"><f a="inFormat:?inQuality">
	<c path="String"/>
	<c path="Float"/>
	<c path="nme.utils.ByteArray"/>
</f></encode>
		<fillRect public="1" set="method" line="240"><f a="rect:inColour">
	<c path="nme.geom.Rectangle"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Void"/>
</f></fillRect>
		<fillRectEx public="1" set="method" line="248"><f a="rect:inColour:?inAlpha">
	<c path="nme.geom.Rectangle"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></fillRectEx>
		<generateFilterRect public="1" set="method" line="254"><f a="sourceRect:filter">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.filters.BitmapFilter"/>
	<c path="nme.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method" line="262"><f a="mask:color:?findColor">
	<t path="nme.display.BitmapInt32"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Bool"/>
	<c path="nme.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method" line="270"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel>
		<getPixel32 public="1" set="method" line="276"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
</f></getPixel32>
		<getPixels public="1" set="method" line="286"><f a="rect">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method" line="297"><f a="rect">
	<c path="nme.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
</f></getVector>
		<lock public="1" set="method" line="364"><f a=""><e path="Void"/></f></lock>
		<nmeDrawToSurface public="1" set="method" line="373">
			<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="nme.geom.Matrix"/>
				<c path="nme.geom.ColorTransform"/>
				<c path="String"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeDrawToSurface>
		<scroll public="1" set="method" line="380"><f a="inDX:inDY">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<setFlags public="1" set="method" line="386"><f a="inFlags">
	<c path="Int"/>
	<e path="Void"/>
</f></setFlags>
		<setPixel public="1" set="method" line="393"><f a="inX:inY:inColour">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method" line="399"><f a="inX:inY:inColour">
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method" line="409"><f a="rect:pixels">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></setPixels>
		<setVector public="1" set="method" line="418"><f a="rect:inPixels">
	<c path="nme.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></setVector>
		<unlock public="1" set="method" line="435"><f a="?changeRect">
	<c path="nme.geom.Rectangle"/>
	<e path="Void"/>
</f></unlock>
		<nmeGetRect set="method" line="446"><f a=""><c path="nme.geom.Rectangle"/></f></nmeGetRect>
		<nmeGetWidth set="method" line="447"><f a=""><c path="Int"/></f></nmeGetWidth>
		<nmeGetHeight set="method" line="448"><f a=""><c path="Int"/></f></nmeGetHeight>
		<nmeGetTransparent set="method" line="449"><f a=""><e path="Bool"/></f></nmeGetTransparent>
		<new public="1" set="method" line="64"><f a="inWidth:inHeight:?inTransparent:?inFillRGBA">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author   Hugh Sanderson
* @author   Russell Weir
* @todo getPixel, getPixel32 should be optimized to use library methods
</haxe_doc>
	</class>
</haxe>